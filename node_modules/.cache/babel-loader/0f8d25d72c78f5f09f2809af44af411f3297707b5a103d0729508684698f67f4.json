{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\SIH\\\\sih\\\\interview-app\\\\src\\\\components\\\\UserDashboard\\\\Interviewpage.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// function InterviewPage() {\n//   const [question, setQuestion] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [userAnswer, setUserAnswer] = useState(\"\");\n//   const [submitMessage, setSubmitMessage] = useState(\"\");\n//   const [currentQuestionId, setCurrentQuestionId] = useState(null);\n//   const [timeLeft, setTimeLeft] = useState(10 * 60); // 10 minutes in seconds\n//   const [interviewComplete, setInterviewComplete] = useState(false);\n\n//   // Fetch the first question or the next question\n//   const fetchQuestion = async (id = null) => {\n//     try {\n//       setLoading(true);\n//       const url = id\n//         ? `http://127.0.0.1:8000/api/fetch-next-question/?current_question_id=${id}`\n//         : \"http://127.0.0.1:8000/api/fetch-next-question/\";\n//       const response = await fetch(url);\n//       if (!response.ok) {\n//         throw new Error(`Error: ${response.statusText}`);\n//       }\n//       const data = await response.json();\n//       if (data.message === \"No more questions available.\") {\n//         setQuestion(null);\n//         setSubmitMessage(\"Interview completed! Thank you.\");\n//         setInterviewComplete(true);\n//       } else {\n//         setQuestion(data);\n//         setCurrentQuestionId(data.id);\n//       }\n//     } catch (err) {\n//       setError(err.message);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchQuestion();\n\n//     // Start the timer\n//     const timer = setInterval(() => {\n//       setTimeLeft((prev) => {\n//         if (prev <= 1) {\n//           clearInterval(timer); // Clear timer when it reaches 0\n//           setInterviewComplete(true);\n//           return 0;\n//         }\n//         return prev - 1;\n//       });\n//     }, 1000);\n\n//     return () => clearInterval(timer);\n//   }, []);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await fetch(\"http://127.0.0.1:8000/api/submit-response/\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({\n//           question_id: currentQuestionId,\n//           user_answer: userAnswer,\n//         }),\n//       });\n\n//       const data = await response.json();\n//       if (response.ok) {\n//         setSubmitMessage(data.message);\n//         setUserAnswer(\"\");\n//         fetchQuestion(currentQuestionId); // Fetch the next question\n//       } else {\n//         setSubmitMessage(data.error);\n//       }\n//     } catch (err) {\n//       setSubmitMessage(\"An error occurred. Please try again.\");\n//     }\n//   };\n\n//   const formatTime = (seconds) => {\n//     const mins = Math.floor(seconds / 60);\n//     const secs = seconds % 60;\n//     return `${mins}:${secs < 10 ? \"0\" : \"\"}${secs}`;\n//   };\n\n//   if (interviewComplete) {\n//     return (\n//       <div style={{ textAlign: \"center\", padding: \"20px\" }}>\n//         <h1>Interview Completed</h1>\n//         <p>Thank you for participating in the interview!</p>\n//       </div>\n//     );\n//   }\n\n//   if (loading) {\n//     return <h1>Loading...</h1>;\n//   }\n\n//   if (error) {\n//     return <h1>Error: {error}</h1>;\n//   }\n\n//   return (\n//     <div style={{ textAlign: \"center\", padding: \"20px\" }}>\n//       <h1>Interview Question</h1>\n//       <h2>Time Left: {formatTime(timeLeft)}</h2>\n//       {question && (\n//         <div>\n//           <h2>{question.question}</h2>\n//           <p>\n//             <strong>Difficulty:</strong> {question.difficulty}\n//           </p>\n//           <form onSubmit={handleSubmit}>\n//             <label>\n//               Your Answer:\n//               <input\n//                 type=\"text\"\n//                 value={userAnswer}\n//                 onChange={(e) => setUserAnswer(e.target.value)}\n//                 required\n//               />\n//             </label>\n//             <br />\n//             <button type=\"submit\">Submit</button>\n//           </form>\n//           {submitMessage && <p>{submitMessage}</p>}\n//         </div>\n//       )}\n//       {!question && <h2>{submitMessage}</h2>}\n//     </div>\n//   );\n// }\n\n// export default InterviewPage;\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction InterviewPage() {\n  _s();\n  const [question, setQuestion] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [userAnswer, setUserAnswer] = useState(\"\");\n  const [submitMessage, setSubmitMessage] = useState(\"\");\n  const [currentQuestionId, setCurrentQuestionId] = useState(null);\n  const [answerTimeLeft, setAnswerTimeLeft] = useState(30); // 30 seconds for answering\n  const [submitTimeLeft, setSubmitTimeLeft] = useState(null); // 1 minute after clicking \"Answer the Question\"\n  const [interviewComplete, setInterviewComplete] = useState(false);\n\n  // Fetch the first question or the next question\n  const fetchQuestion = async (id = null) => {\n    try {\n      setLoading(true);\n      const url = id ? `http://127.0.0.1:8000/api/fetch-next-question/?current_question_id=${id}` : \"http://127.0.0.1:8000/api/fetch-next-question/\";\n      const response = await fetch(url);\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      const data = await response.json();\n      if (data.message === \"No more questions available.\") {\n        setQuestion(null);\n        setSubmitMessage(\"Interview completed! Thank you.\");\n        setInterviewComplete(true);\n      } else {\n        setQuestion(data);\n        setCurrentQuestionId(data.id);\n        setAnswerTimeLeft(30); // Reset answer time for new question\n        setSubmitTimeLeft(null); // Reset submit time\n        setUserAnswer(\"\"); // Clear previous answer\n      }\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchQuestion();\n\n    // Timer for interview session\n    const interviewTimer = setInterval(() => {\n      setAnswerTimeLeft(prev => {\n        if (prev === 1) {\n          clearInterval(interviewTimer);\n          fetchQuestion(currentQuestionId); // Fetch the next question automatically\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    return () => clearInterval(interviewTimer);\n  }, [currentQuestionId]);\n  const handleAnswerButton = () => {\n    if (answerTimeLeft > 0) {\n      setSubmitTimeLeft(60); // Start submit timer (1 minute)\n    }\n  };\n  useEffect(() => {\n    if (submitTimeLeft !== null) {\n      const submitTimer = setInterval(() => {\n        setSubmitTimeLeft(prev => {\n          if (prev === 1) {\n            clearInterval(submitTimer);\n            fetchQuestion(currentQuestionId); // Fetch the next question automatically\n            return 0;\n          }\n          return prev - 1;\n        });\n      }, 1000);\n      return () => clearInterval(submitTimer);\n    }\n  }, [submitTimeLeft]);\n  const handleSubmit = async () => {\n    try {\n      const response = await fetch(\"http://127.0.0.1:8000/api/submit-response/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          question_id: currentQuestionId,\n          user_answer: userAnswer\n        })\n      });\n      const data = await response.json();\n      if (response.ok) {\n        setSubmitMessage(data.message);\n        fetchQuestion(currentQuestionId); // Fetch the next question after submission\n      } else {\n        setSubmitMessage(data.error);\n      }\n    } catch (err) {\n      setSubmitMessage(\"An error occurred. Please try again.\");\n    }\n  };\n  const handleNextQuestion = () => {\n    fetchQuestion(currentQuestionId); // Skip to the next question\n  };\n  if (interviewComplete) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        textAlign: \"center\",\n        padding: \"20px\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Interview Completed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 261,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Thank you for participating in the interview!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this);\n  }\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 12\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 272,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Interview Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Answer Time Left: \", answerTimeLeft, \"s\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }, this), submitTimeLeft !== null && /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Submit Time Left: \", submitTimeLeft, \"s\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 35\n    }, this), question && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: question.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAnswerButton,\n          children: \"Answer the Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleSubmit,\n          children: \"Submit the Answer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 285,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleNextQuestion,\n          children: \"Go to Next Question\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [\"Your Answer:\", /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            value: userAnswer,\n            onChange: e => setUserAnswer(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 291,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 11\n      }, this), submitMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: submitMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 29\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 281,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 276,\n    columnNumber: 5\n  }, this);\n}\n_s(InterviewPage, \"AaysDW7W3AwgGOIajduwD0ZMJTE=\");\n_c = InterviewPage;\nexport default InterviewPage;\nvar _c;\n$RefreshReg$(_c, \"InterviewPage\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","InterviewPage","_s","question","setQuestion","loading","setLoading","error","setError","userAnswer","setUserAnswer","submitMessage","setSubmitMessage","currentQuestionId","setCurrentQuestionId","answerTimeLeft","setAnswerTimeLeft","submitTimeLeft","setSubmitTimeLeft","interviewComplete","setInterviewComplete","fetchQuestion","id","url","response","fetch","ok","Error","statusText","data","json","message","err","interviewTimer","setInterval","prev","clearInterval","handleAnswerButton","submitTimer","handleSubmit","method","headers","body","JSON","stringify","question_id","user_answer","handleNextQuestion","style","textAlign","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","value","onChange","e","target","_c","$RefreshReg$"],"sources":["D:/Projects/SIH/sih/interview-app/src/components/UserDashboard/Interviewpage.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n\r\n// function InterviewPage() {\r\n//   const [question, setQuestion] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n//   const [userAnswer, setUserAnswer] = useState(\"\");\r\n//   const [submitMessage, setSubmitMessage] = useState(\"\");\r\n//   const [currentQuestionId, setCurrentQuestionId] = useState(null);\r\n//   const [timeLeft, setTimeLeft] = useState(10 * 60); // 10 minutes in seconds\r\n//   const [interviewComplete, setInterviewComplete] = useState(false);\r\n\r\n//   // Fetch the first question or the next question\r\n//   const fetchQuestion = async (id = null) => {\r\n//     try {\r\n//       setLoading(true);\r\n//       const url = id\r\n//         ? `http://127.0.0.1:8000/api/fetch-next-question/?current_question_id=${id}`\r\n//         : \"http://127.0.0.1:8000/api/fetch-next-question/\";\r\n//       const response = await fetch(url);\r\n//       if (!response.ok) {\r\n//         throw new Error(`Error: ${response.statusText}`);\r\n//       }\r\n//       const data = await response.json();\r\n//       if (data.message === \"No more questions available.\") {\r\n//         setQuestion(null);\r\n//         setSubmitMessage(\"Interview completed! Thank you.\");\r\n//         setInterviewComplete(true);\r\n//       } else {\r\n//         setQuestion(data);\r\n//         setCurrentQuestionId(data.id);\r\n//       }\r\n//     } catch (err) {\r\n//       setError(err.message);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchQuestion();\r\n\r\n//     // Start the timer\r\n//     const timer = setInterval(() => {\r\n//       setTimeLeft((prev) => {\r\n//         if (prev <= 1) {\r\n//           clearInterval(timer); // Clear timer when it reaches 0\r\n//           setInterviewComplete(true);\r\n//           return 0;\r\n//         }\r\n//         return prev - 1;\r\n//       });\r\n//     }, 1000);\r\n\r\n//     return () => clearInterval(timer);\r\n//   }, []);\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       const response = await fetch(\"http://127.0.0.1:8000/api/submit-response/\", {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//           \"Content-Type\": \"application/json\",\r\n//         },\r\n//         body: JSON.stringify({\r\n//           question_id: currentQuestionId,\r\n//           user_answer: userAnswer,\r\n//         }),\r\n//       });\r\n\r\n//       const data = await response.json();\r\n//       if (response.ok) {\r\n//         setSubmitMessage(data.message);\r\n//         setUserAnswer(\"\");\r\n//         fetchQuestion(currentQuestionId); // Fetch the next question\r\n//       } else {\r\n//         setSubmitMessage(data.error);\r\n//       }\r\n//     } catch (err) {\r\n//       setSubmitMessage(\"An error occurred. Please try again.\");\r\n//     }\r\n//   };\r\n\r\n//   const formatTime = (seconds) => {\r\n//     const mins = Math.floor(seconds / 60);\r\n//     const secs = seconds % 60;\r\n//     return `${mins}:${secs < 10 ? \"0\" : \"\"}${secs}`;\r\n//   };\r\n\r\n//   if (interviewComplete) {\r\n//     return (\r\n//       <div style={{ textAlign: \"center\", padding: \"20px\" }}>\r\n//         <h1>Interview Completed</h1>\r\n//         <p>Thank you for participating in the interview!</p>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   if (loading) {\r\n//     return <h1>Loading...</h1>;\r\n//   }\r\n\r\n//   if (error) {\r\n//     return <h1>Error: {error}</h1>;\r\n//   }\r\n\r\n//   return (\r\n//     <div style={{ textAlign: \"center\", padding: \"20px\" }}>\r\n//       <h1>Interview Question</h1>\r\n//       <h2>Time Left: {formatTime(timeLeft)}</h2>\r\n//       {question && (\r\n//         <div>\r\n//           <h2>{question.question}</h2>\r\n//           <p>\r\n//             <strong>Difficulty:</strong> {question.difficulty}\r\n//           </p>\r\n//           <form onSubmit={handleSubmit}>\r\n//             <label>\r\n//               Your Answer:\r\n//               <input\r\n//                 type=\"text\"\r\n//                 value={userAnswer}\r\n//                 onChange={(e) => setUserAnswer(e.target.value)}\r\n//                 required\r\n//               />\r\n//             </label>\r\n//             <br />\r\n//             <button type=\"submit\">Submit</button>\r\n//           </form>\r\n//           {submitMessage && <p>{submitMessage}</p>}\r\n//         </div>\r\n//       )}\r\n//       {!question && <h2>{submitMessage}</h2>}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\r\n// export default InterviewPage;\r\n\r\n\r\n\r\nimport React, { useState, useEffect } from 'react';\r\n\r\nfunction InterviewPage() {\r\n  const [question, setQuestion] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const [userAnswer, setUserAnswer] = useState(\"\");\r\n  const [submitMessage, setSubmitMessage] = useState(\"\");\r\n  const [currentQuestionId, setCurrentQuestionId] = useState(null);\r\n  const [answerTimeLeft, setAnswerTimeLeft] = useState(30); // 30 seconds for answering\r\n  const [submitTimeLeft, setSubmitTimeLeft] = useState(null); // 1 minute after clicking \"Answer the Question\"\r\n  const [interviewComplete, setInterviewComplete] = useState(false);\r\n\r\n  // Fetch the first question or the next question\r\n  const fetchQuestion = async (id = null) => {\r\n    try {\r\n      setLoading(true);\r\n      const url = id\r\n        ? `http://127.0.0.1:8000/api/fetch-next-question/?current_question_id=${id}`\r\n        : \"http://127.0.0.1:8000/api/fetch-next-question/\";\r\n      const response = await fetch(url);\r\n      if (!response.ok) {\r\n        throw new Error(`Error: ${response.statusText}`);\r\n      }\r\n      const data = await response.json();\r\n      if (data.message === \"No more questions available.\") {\r\n        setQuestion(null);\r\n        setSubmitMessage(\"Interview completed! Thank you.\");\r\n        setInterviewComplete(true);\r\n      } else {\r\n        setQuestion(data);\r\n        setCurrentQuestionId(data.id);\r\n        setAnswerTimeLeft(30); // Reset answer time for new question\r\n        setSubmitTimeLeft(null); // Reset submit time\r\n        setUserAnswer(\"\"); // Clear previous answer\r\n      }\r\n    } catch (err) {\r\n      setError(err.message);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchQuestion();\r\n\r\n    // Timer for interview session\r\n    const interviewTimer = setInterval(() => {\r\n      setAnswerTimeLeft((prev) => {\r\n        if (prev === 1) {\r\n          clearInterval(interviewTimer);\r\n          fetchQuestion(currentQuestionId); // Fetch the next question automatically\r\n          return 0;\r\n        }\r\n        return prev - 1;\r\n      });\r\n    }, 1000);\r\n\r\n    return () => clearInterval(interviewTimer);\r\n  }, [currentQuestionId]);\r\n\r\n  const handleAnswerButton = () => {\r\n    if (answerTimeLeft > 0) {\r\n      setSubmitTimeLeft(60); // Start submit timer (1 minute)\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (submitTimeLeft !== null) {\r\n      const submitTimer = setInterval(() => {\r\n        setSubmitTimeLeft((prev) => {\r\n          if (prev === 1) {\r\n            clearInterval(submitTimer);\r\n            fetchQuestion(currentQuestionId); // Fetch the next question automatically\r\n            return 0;\r\n          }\r\n          return prev - 1;\r\n        });\r\n      }, 1000);\r\n\r\n      return () => clearInterval(submitTimer);\r\n    }\r\n  }, [submitTimeLeft]);\r\n\r\n  const handleSubmit = async () => {\r\n    try {\r\n      const response = await fetch(\"http://127.0.0.1:8000/api/submit-response/\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          question_id: currentQuestionId,\r\n          user_answer: userAnswer,\r\n        }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      if (response.ok) {\r\n        setSubmitMessage(data.message);\r\n        fetchQuestion(currentQuestionId); // Fetch the next question after submission\r\n      } else {\r\n        setSubmitMessage(data.error);\r\n      }\r\n    } catch (err) {\r\n      setSubmitMessage(\"An error occurred. Please try again.\");\r\n    }\r\n  };\r\n\r\n  const handleNextQuestion = () => {\r\n    fetchQuestion(currentQuestionId); // Skip to the next question\r\n  };\r\n\r\n  if (interviewComplete) {\r\n    return (\r\n      <div style={{ textAlign: \"center\", padding: \"20px\" }}>\r\n        <h1>Interview Completed</h1>\r\n        <p>Thank you for participating in the interview!</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (loading) {\r\n    return <h1>Loading...</h1>;\r\n  }\r\n\r\n  if (error) {\r\n    return <h1>Error: {error}</h1>;\r\n  }\r\n\r\n  return (\r\n    <div style={{ textAlign: \"center\", padding: \"20px\" }}>\r\n      <h1>Interview Question</h1>\r\n      <h2>Answer Time Left: {answerTimeLeft}s</h2>\r\n      {submitTimeLeft !== null && <h2>Submit Time Left: {submitTimeLeft}s</h2>}\r\n      {question && (\r\n        <div>\r\n          <h2>{question.question}</h2>\r\n          <div>\r\n            <button onClick={handleAnswerButton}>Answer the Question</button>\r\n            <button onClick={handleSubmit}>Submit the Answer</button>\r\n            <button onClick={handleNextQuestion}>Go to Next Question</button>\r\n          </div>\r\n          <div>\r\n            <label>\r\n              Your Answer:\r\n              <input\r\n                type=\"text\"\r\n                value={userAnswer}\r\n                onChange={(e) => setUserAnswer(e.target.value)}\r\n              />\r\n            </label>\r\n          </div>\r\n          {submitMessage && <p>{submitMessage}</p>}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default InterviewPage;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACQ,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACU,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACY,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACc,aAAa,EAAEC,gBAAgB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACgB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGjB,QAAQ,CAAC,IAAI,CAAC;EAChE,MAAM,CAACkB,cAAc,EAAEC,iBAAiB,CAAC,GA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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}