{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\SIH\\\\sih\\\\interview-app\\\\src\\\\components\\\\UserDashboard\\\\CompatibilityTest.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useNavigate, useParams } from \"react-router-dom\"; // useParams to get jobId from URL\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CompatibilityTest = () => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const navigate = useNavigate(); // React Router hook for redirection\n  const {\n    jobId\n  } = useParams(); // Extract jobId from the URL\n\n  // Handle Internet test\n  const handleInternetTest = async () => {\n    setLoading(true);\n    try {\n      const response = await fetch(\"https://www.google.com\", {\n        mode: \"no-cors\"\n      });\n      if (response.ok || response.type === \"opaque\") {\n        alert(\"Internet test passed!\");\n        // Redirect to InterviewPage after successful Internet test\n        navigate(`/Interviewpage/${jobId}`);\n      } else {\n        alert(\"Internet test failed.\");\n      }\n    } catch (error) {\n      console.error(\"Internet test error:\", error);\n      alert(\"Internet test failed: Unable to fetch the URL.\");\n    } finally {\n      setLoading(false);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Compatibility Test\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleInternetTest,\n      disabled: loading,\n      children: loading ? \"Checking...\" : \"Test Internet Connectivity\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n};\n_s(CompatibilityTest, \"sNLRaKMrwcrtVAbnvIWK+M8XT/w=\", false, function () {\n  return [useNavigate, useParams];\n});\n_c = CompatibilityTest;\nexport default CompatibilityTest;\nvar _c;\n$RefreshReg$(_c, \"CompatibilityTest\");","map":{"version":3,"names":["React","useState","useNavigate","useParams","jsxDEV","_jsxDEV","CompatibilityTest","_s","loading","setLoading","navigate","jobId","handleInternetTest","response","fetch","mode","ok","type","alert","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/Projects/SIH/sih/interview-app/src/components/UserDashboard/CompatibilityTest.jsx"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport { useNavigate, useParams } from \"react-router-dom\"; // useParams to get jobId from URL\r\n\r\nconst CompatibilityTest = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const navigate = useNavigate(); // React Router hook for redirection\r\n    const { jobId } = useParams(); // Extract jobId from the URL\r\n\r\n    // Handle Internet test\r\n    const handleInternetTest = async () => {\r\n        setLoading(true);\r\n        try {\r\n            const response = await fetch(\"https://www.google.com\", { mode: \"no-cors\" });\r\n            if (response.ok || response.type === \"opaque\") {\r\n                alert(\"Internet test passed!\");\r\n                // Redirect to InterviewPage after successful Internet test\r\n                navigate(`/Interviewpage/${jobId}`);\r\n            } else {\r\n                alert(\"Internet test failed.\");\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Internet test error:\", error);\r\n            alert(\"Internet test failed: Unable to fetch the URL.\");\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <h2>Compatibility Test</h2>\r\n            <button onClick={handleInternetTest} disabled={loading}>\r\n                {loading ? \"Checking...\" : \"Test Internet Connectivity\"}\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CompatibilityTest;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAASC,WAAW,EAAEC,SAAS,QAAQ,kBAAkB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE3D,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,KAAK,CAAC;EAC7C,MAAMS,QAAQ,GAAGR,WAAW,CAAC,CAAC,CAAC,CAAC;EAChC,MAAM;IAAES;EAAM,CAAC,GAAGR,SAAS,CAAC,CAAC,CAAC,CAAC;;EAE/B;EACA,MAAMS,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACnCH,UAAU,CAAC,IAAI,CAAC;IAChB,IAAI;MACA,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,wBAAwB,EAAE;QAAEC,IAAI,EAAE;MAAU,CAAC,CAAC;MAC3E,IAAIF,QAAQ,CAACG,EAAE,IAAIH,QAAQ,CAACI,IAAI,KAAK,QAAQ,EAAE;QAC3CC,KAAK,CAAC,uBAAuB,CAAC;QAC9B;QACAR,QAAQ,CAAC,kBAAkBC,KAAK,EAAE,CAAC;MACvC,CAAC,MAAM;QACHO,KAAK,CAAC,uBAAuB,CAAC;MAClC;IACJ,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5CD,KAAK,CAAC,gDAAgD,CAAC;IAC3D,CAAC,SAAS;MACNT,UAAU,CAAC,KAAK,CAAC;IACrB;EACJ,CAAC;EAED,oBACIJ,OAAA;IAAAgB,QAAA,gBACIhB,OAAA;MAAAgB,QAAA,EAAI;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eAC3BpB,OAAA;MAAQqB,OAAO,EAAEd,kBAAmB;MAACe,QAAQ,EAAEnB,OAAQ;MAAAa,QAAA,EAClDb,OAAO,GAAG,aAAa,GAAG;IAA4B;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACnD,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACR,CAAC;AAEd,CAAC;AAAClB,EAAA,CAjCID,iBAAiB;EAAA,QAEFJ,WAAW,EACVC,SAAS;AAAA;AAAAyB,EAAA,GAHzBtB,iBAAiB;AAmCvB,eAAeA,iBAAiB;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}