{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\SIH\\\\sih\\\\interview-app\\\\src\\\\components\\\\UserDashboard\\\\Interviewpage.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import axios from 'axios';\n\n// function InterviewPage() {\n//   const [question, setQuestion] = useState(null);\n//   const [loading, setLoading] = useState(true);\n//   const [error, setError] = useState(null);\n//   const [userAnswer, setUserAnswer] = useState(\"\");\n//   const [submitMessage, setSubmitMessage] = useState(\"\");\n//   const [currentQuestionId, setCurrentQuestionId] = useState(null);\n//   const [timeLeft, setTimeLeft] = useState(10 * 60); // 10 minutes in seconds\n//   const [interviewComplete, setInterviewComplete] = useState(false);\n\n//   // Fetch the first question or the next question\n//   const fetchQuestion = async (id = null) => {\n//     try {\n//       setLoading(true);\n//       const url = id\n//         ? `http://127.0.0.1:8000/api/fetch-next-question/?current_question_id=${id}`\n//         : \"http://127.0.0.1:8000/api/fetch-next-question/\";\n//       const response = await fetch(url);\n//       if (!response.ok) {\n//         throw new Error(`Error: ${response.statusText}`);\n//       }\n//       const data = await response.json();\n//       if (data.message === \"No more questions available.\") {\n//         setQuestion(null);\n//         setSubmitMessage(\"Interview completed! Thank you.\");\n//         setInterviewComplete(true);\n//       } else {\n//         setQuestion(data);\n//         setCurrentQuestionId(data.id);\n//       }\n//     } catch (err) {\n//       setError(err.message);\n//     } finally {\n//       setLoading(false);\n//     }\n//   };\n\n//   useEffect(() => {\n//     fetchQuestion();\n\n//     // Start the timer\n//     const timer = setInterval(() => {\n//       setTimeLeft((prev) => {\n//         if (prev <= 1) {\n//           clearInterval(timer); // Clear timer when it reaches 0\n//           setInterviewComplete(true);\n//           return 0;\n//         }\n//         return prev - 1;\n//       });\n//     }, 1000);\n\n//     return () => clearInterval(timer);\n//   }, []);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n//     try {\n//       const response = await fetch(\"http://127.0.0.1:8000/api/submit-response/\", {\n//         method: \"POST\",\n//         headers: {\n//           \"Content-Type\": \"application/json\",\n//         },\n//         body: JSON.stringify({\n//           question_id: currentQuestionId,\n//           user_answer: userAnswer,\n//         }),  \n//       });\n\n//       const data = await response.json();\n//       if (response.ok) {\n//         setSubmitMessage(data.message);\n//         setUserAnswer(\"\");\n//         fetchQuestion(currentQuestionId); // Fetch the next question\n//       } else {\n//         setSubmitMessage(data.error);\n//       }\n//     } catch (err) {\n//       setSubmitMessage(\"An error occurred. Please try again.\");\n//     }\n//   };\n\n//   const formatTime = (seconds) => {\n//     const mins = Math.floor(seconds / 60);\n//     const secs = seconds % 60;\n//     return `${mins}:${secs < 10 ? \"0\" : \"\"}${secs}`;\n//   };\n\n//   if (interviewComplete) {\n//     return (\n//       <div style={{ textAlign: \"center\", padding: \"20px\" }}>\n//         <h1>Interview Completed</h1>\n//         <p>Thank you for participating in the interview!</p>\n//       </div>\n//     );\n//   }\n\n//   if (loading) {\n//     return <h1>Loading...</h1>;\n//   }\n\n//   if (error) {\n//     return <h1>Error: {error}</h1>;\n//   }\n\n//   return (\n//     <div style={{ textAlign: \"center\", padding: \"20px\" }}>\n//       <h1>Interview Question</h1>\n//       <h2>Time Left: {formatTime(timeLeft)}</h2>\n//       {question && (\n//         <div>\n//           <h2>{question.question}</h2>\n//           <p>\n//             <strong>Difficulty:</strong> {question.difficulty}\n//           </p>\n//           <form onSubmit={handleSubmit}>\n//             <label>\n//               Your Answer:\n//               <input\n//                 type=\"text\"\n//                 value={userAnswer}\n//                 onChange={(e) => setUserAnswer(e.target.value)}\n//                 required\n//               />\n//             </label>\n//             <br />\n//             <button type=\"submit\">Submit</button>\n//           </form>\n//           {submitMessage && <p>{submitMessage}</p>}\n//         </div>\n//       )}\n//       {!question && <h2>{submitMessage}</h2>}\n//     </div>\n//   );\n// }\n\n// export default InterviewPage;\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction InterviewPage() {\n  _s();\n  const [question, setQuestion] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [userAnswer, setUserAnswer] = useState(\"\");\n  const [submitMessage, setSubmitMessage] = useState(\"\");\n  const [currentQuestionId, setCurrentQuestionId] = useState(null);\n  const [answerTimer, setAnswerTimer] = useState(30); // 30 seconds for \"Answer the Question\"\n  const [submitTimer, setSubmitTimer] = useState(60); // 1 minute to submit after clicking \"Answer the Question\"\n  const [isAnswering, setIsAnswering] = useState(false);\n  const answerTimerRef = useRef(null);\n  const submitTimerRef = useRef(null);\n\n  // Fetch the first question or the next question\n  const fetchQuestion = async (id = null) => {\n    try {\n      setLoading(true);\n      setQuestion(null); // Clear the current question while fetching the new one\n      const url = id ? `http://127.0.0.1:8000/api/fetch-next-question/?current_question_id=${id}` : \"http://127.0.0.1:8000/api/fetch-next-question/\";\n      const response = await axios.get(url);\n      const data = response.data;\n      if (data.message === \"No more questions available.\") {\n        setQuestion(null);\n        setSubmitMessage(\"Interview completed! Thank you.\");\n        clearTimers();\n      } else {\n        setQuestion(data);\n        setCurrentQuestionId(data.id);\n        resetTimers();\n      }\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchQuestion();\n\n    // Timer for answering the question\n    startAnswerTimer();\n    return () => clearTimers();\n  }, []);\n  const clearTimers = () => {\n    if (answerTimerRef.current) clearInterval(answerTimerRef.current);\n    if (submitTimerRef.current) clearInterval(submitTimerRef.current);\n  };\n  const resetTimers = () => {\n    clearTimers();\n    setAnswerTimer(10);\n    setSubmitTimer(10);\n    setIsAnswering(false);\n\n    // Restart answer timer\n    startAnswerTimer();\n  };\n  const startAnswerTimer = () => {\n    answerTimerRef.current = setInterval(() => {\n      setAnswerTimer(prev => {\n        if (prev <= 1) {\n          clearInterval(answerTimerRef.current);\n          handleSkipQuestion(); // Automatically fetch next question\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n  const startSubmitTimer = () => {\n    submitTimerRef.current = setInterval(() => {\n      setSubmitTimer(prev => {\n        if (prev <= 1) {\n          clearInterval(submitTimerRef.current);\n          handleSkipQuestion(); // Skip question if not submitted within 1 minute\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n  const startAnswering = () => {\n    setIsAnswering(true);\n    clearInterval(answerTimerRef.current); // Stop the answer timer\n    startSubmitTimer(); // Start the submit timer\n  };\n  const handleVoiceInput = () => {\n    const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n    recognition.lang = \"en-US\";\n    recognition.interimResults = false;\n    recognition.onresult = event => {\n      const transcript = event.results[0][0].transcript;\n      setUserAnswer(transcript);\n    };\n    recognition.onerror = event => {\n      console.error(\"Speech recognition error:\", event.error);\n    };\n    recognition.start();\n  };\n  const handleSubmit = async () => {\n    if (!userAnswer.trim()) {\n      alert(\"Please provide an answer before submitting.\");\n      return;\n    }\n    try {\n      const response = await axios.post(\"http://127.0.0.1:8000/api/submit-response/\", {\n        question_id: currentQuestionId,\n        user_answer: userAnswer\n      });\n      if (response.status === 200) {\n        const data = response.data;\n        setSubmitMessage(data.message || \"Answer submitted successfully!\");\n        setUserAnswer(\"\");\n        fetchQuestion(currentQuestionId); // Fetch the next question\n      } else {\n        setSubmitMessage(\"An error occurred. Please try again.\");\n      }\n    } catch (err) {\n      if (err.response) {\n        setSubmitMessage(err.response.data.error || \"An error occurred. Please try again.\");\n      } else {\n        setSubmitMessage(\"A network error occurred. Please check your connection.\");\n      }\n    } finally {\n      clearInterval(submitTimerRef.current);\n    }\n  };\n  const handleSkipQuestion = () => {\n    setUserAnswer(\"\");\n    setSubmitMessage(\"\");\n    fetchQuestion(currentQuestionId); // Fetch the next question\n  };\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs < 10 ? \"0\" : \"\"}${secs}`;\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 306,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 307,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Interview Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 311,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: isAnswering ? `Submit Time Left: ${formatTime(submitTimer)}` : `Answer Time Left: ${formatTime(answerTimer)}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 13\n    }, this), question && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: question.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Difficulty:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 24\n        }, this), \" \", question.difficulty]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: userAnswer,\n        onChange: e => setUserAnswer(e.target.value),\n        rows: \"4\",\n        cols: \"50\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 318,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startAnswering,\n        disabled: isAnswering,\n        children: \"Answer the Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleVoiceInput,\n        disabled: !isAnswering,\n        children: \"Use Voice Input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 328,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        disabled: !isAnswering,\n        children: \"Submit Answer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSkipQuestion,\n        children: \"Skip Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 315,\n      columnNumber: 17\n    }, this), submitMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: submitMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 31\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 310,\n    columnNumber: 9\n  }, this);\n}\n_s(InterviewPage, \"WZO7HYVtX7cMI3xBzu0JFUIE+T8=\");\n_c = InterviewPage;\nexport default InterviewPage;\nvar _c;\n$RefreshReg$(_c, \"InterviewPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","jsxDEV","_jsxDEV","InterviewPage","_s","question","setQuestion","loading","setLoading","error","setError","userAnswer","setUserAnswer","submitMessage","setSubmitMessage","currentQuestionId","setCurrentQuestionId","answerTimer","setAnswerTimer","submitTimer","setSubmitTimer","isAnswering","setIsAnswering","answerTimerRef","submitTimerRef","fetchQuestion","id","url","response","get","data","message","clearTimers","resetTimers","err","startAnswerTimer","current","clearInterval","setInterval","prev","handleSkipQuestion","startSubmitTimer","startAnswering","handleVoiceInput","recognition","window","SpeechRecognition","webkitSpeechRecognition","lang","interimResults","onresult","event","transcript","results","onerror","console","start","handleSubmit","trim","alert","post","question_id","user_answer","status","formatTime","seconds","mins","Math","floor","secs","children","fileName","_jsxFileName","lineNumber","columnNumber","style","textAlign","padding","difficulty","value","onChange","e","target","rows","cols","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/Projects/SIH/sih/interview-app/src/components/UserDashboard/Interviewpage.jsx"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\r\n// import axios from 'axios';\r\n\r\n// function InterviewPage() {\r\n//   const [question, setQuestion] = useState(null);\r\n//   const [loading, setLoading] = useState(true);\r\n//   const [error, setError] = useState(null);\r\n//   const [userAnswer, setUserAnswer] = useState(\"\");\r\n//   const [submitMessage, setSubmitMessage] = useState(\"\");\r\n//   const [currentQuestionId, setCurrentQuestionId] = useState(null);\r\n//   const [timeLeft, setTimeLeft] = useState(10 * 60); // 10 minutes in seconds\r\n//   const [interviewComplete, setInterviewComplete] = useState(false);\r\n\r\n//   // Fetch the first question or the next question\r\n//   const fetchQuestion = async (id = null) => {\r\n//     try {\r\n//       setLoading(true);\r\n//       const url = id\r\n//         ? `http://127.0.0.1:8000/api/fetch-next-question/?current_question_id=${id}`\r\n//         : \"http://127.0.0.1:8000/api/fetch-next-question/\";\r\n//       const response = await fetch(url);\r\n//       if (!response.ok) {\r\n//         throw new Error(`Error: ${response.statusText}`);\r\n//       }\r\n//       const data = await response.json();\r\n//       if (data.message === \"No more questions available.\") {\r\n//         setQuestion(null);\r\n//         setSubmitMessage(\"Interview completed! Thank you.\");\r\n//         setInterviewComplete(true);\r\n//       } else {\r\n//         setQuestion(data);\r\n//         setCurrentQuestionId(data.id);\r\n//       }\r\n//     } catch (err) {\r\n//       setError(err.message);\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     fetchQuestion();\r\n\r\n//     // Start the timer\r\n//     const timer = setInterval(() => {\r\n//       setTimeLeft((prev) => {\r\n//         if (prev <= 1) {\r\n//           clearInterval(timer); // Clear timer when it reaches 0\r\n//           setInterviewComplete(true);\r\n//           return 0;\r\n//         }\r\n//         return prev - 1;\r\n//       });\r\n//     }, 1000);\r\n\r\n//     return () => clearInterval(timer);\r\n//   }, []);\r\n\r\n//   const handleSubmit = async (e) => {\r\n//     e.preventDefault();\r\n//     try {\r\n//       const response = await fetch(\"http://127.0.0.1:8000/api/submit-response/\", {\r\n//         method: \"POST\",\r\n//         headers: {\r\n//           \"Content-Type\": \"application/json\",\r\n//         },\r\n//         body: JSON.stringify({\r\n//           question_id: currentQuestionId,\r\n//           user_answer: userAnswer,\r\n//         }),  \r\n//       });\r\n\r\n//       const data = await response.json();\r\n//       if (response.ok) {\r\n//         setSubmitMessage(data.message);\r\n//         setUserAnswer(\"\");\r\n//         fetchQuestion(currentQuestionId); // Fetch the next question\r\n//       } else {\r\n//         setSubmitMessage(data.error);\r\n//       }\r\n//     } catch (err) {\r\n//       setSubmitMessage(\"An error occurred. Please try again.\");\r\n//     }\r\n//   };\r\n\r\n//   const formatTime = (seconds) => {\r\n//     const mins = Math.floor(seconds / 60);\r\n//     const secs = seconds % 60;\r\n//     return `${mins}:${secs < 10 ? \"0\" : \"\"}${secs}`;\r\n//   };\r\n\r\n//   if (interviewComplete) {\r\n//     return (\r\n//       <div style={{ textAlign: \"center\", padding: \"20px\" }}>\r\n//         <h1>Interview Completed</h1>\r\n//         <p>Thank you for participating in the interview!</p>\r\n//       </div>\r\n//     );\r\n//   }\r\n\r\n//   if (loading) {\r\n//     return <h1>Loading...</h1>;\r\n//   }\r\n\r\n//   if (error) {\r\n//     return <h1>Error: {error}</h1>;\r\n//   }\r\n\r\n//   return (\r\n//     <div style={{ textAlign: \"center\", padding: \"20px\" }}>\r\n//       <h1>Interview Question</h1>\r\n//       <h2>Time Left: {formatTime(timeLeft)}</h2>\r\n//       {question && (\r\n//         <div>\r\n//           <h2>{question.question}</h2>\r\n//           <p>\r\n//             <strong>Difficulty:</strong> {question.difficulty}\r\n//           </p>\r\n//           <form onSubmit={handleSubmit}>\r\n//             <label>\r\n//               Your Answer:\r\n//               <input\r\n//                 type=\"text\"\r\n//                 value={userAnswer}\r\n//                 onChange={(e) => setUserAnswer(e.target.value)}\r\n//                 required\r\n//               />\r\n//             </label>\r\n//             <br />\r\n//             <button type=\"submit\">Submit</button>\r\n//           </form>\r\n//           {submitMessage && <p>{submitMessage}</p>}\r\n//         </div>\r\n//       )}\r\n//       {!question && <h2>{submitMessage}</h2>}\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\r\n// export default InterviewPage;\r\n\r\n\r\n\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction InterviewPage() {\r\n    const [question, setQuestion] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [userAnswer, setUserAnswer] = useState(\"\");\r\n    const [submitMessage, setSubmitMessage] = useState(\"\");\r\n    const [currentQuestionId, setCurrentQuestionId] = useState(null);\r\n    const [answerTimer, setAnswerTimer] = useState(30); // 30 seconds for \"Answer the Question\"\r\n    const [submitTimer, setSubmitTimer] = useState(60); // 1 minute to submit after clicking \"Answer the Question\"\r\n    const [isAnswering, setIsAnswering] = useState(false);\r\n\r\n    const answerTimerRef = useRef(null);\r\n    const submitTimerRef = useRef(null);\r\n\r\n    // Fetch the first question or the next question\r\n    const fetchQuestion = async (id = null) => {\r\n        try {\r\n            setLoading(true);\r\n            setQuestion(null); // Clear the current question while fetching the new one\r\n            const url = id\r\n        ? `http://127.0.0.1:8000/api/fetch-next-question/?current_question_id=${id}`\r\n        : \"http://127.0.0.1:8000/api/fetch-next-question/\";\r\n            const response = await axios.get(url);\r\n            const data = response.data;\r\n\r\n            if (data.message === \"No more questions available.\") {\r\n                setQuestion(null);\r\n                setSubmitMessage(\"Interview completed! Thank you.\");\r\n                clearTimers();\r\n            } else {\r\n                setQuestion(data);\r\n                setCurrentQuestionId(data.id);\r\n                resetTimers();\r\n            }\r\n        } catch (err) {\r\n            setError(err.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        fetchQuestion();\r\n\r\n        // Timer for answering the question\r\n        startAnswerTimer();\r\n\r\n        return () => clearTimers();\r\n    }, []);\r\n\r\n    const clearTimers = () => {\r\n        if (answerTimerRef.current) clearInterval(answerTimerRef.current);\r\n        if (submitTimerRef.current) clearInterval(submitTimerRef.current);\r\n    };\r\n\r\n    const resetTimers = () => {\r\n        clearTimers();\r\n\r\n        setAnswerTimer(10);\r\n        setSubmitTimer(10);\r\n        setIsAnswering(false);\r\n\r\n        // Restart answer timer\r\n        startAnswerTimer();\r\n    };\r\n\r\n    const startAnswerTimer = () => {\r\n        answerTimerRef.current = setInterval(() => {\r\n            setAnswerTimer((prev) => {\r\n                if (prev <= 1) {\r\n                    clearInterval(answerTimerRef.current);\r\n                    handleSkipQuestion(); // Automatically fetch next question\r\n                    return 0;\r\n                }\r\n                return prev - 1;\r\n            });\r\n        }, 1000);\r\n    };\r\n\r\n    const startSubmitTimer = () => {\r\n        submitTimerRef.current = setInterval(() => {\r\n            setSubmitTimer((prev) => {\r\n                if (prev <= 1) {\r\n                    clearInterval(submitTimerRef.current);\r\n                    handleSkipQuestion(); // Skip question if not submitted within 1 minute\r\n                    return 0;\r\n                }\r\n                return prev - 1;\r\n            });\r\n        }, 1000);\r\n    };\r\n\r\n    const startAnswering = () => {\r\n        setIsAnswering(true);\r\n        clearInterval(answerTimerRef.current); // Stop the answer timer\r\n        startSubmitTimer(); // Start the submit timer\r\n    };\r\n\r\n    const handleVoiceInput = () => {\r\n        const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\r\n        recognition.lang = \"en-US\";\r\n        recognition.interimResults = false;\r\n\r\n        recognition.onresult = (event) => {\r\n            const transcript = event.results[0][0].transcript;\r\n            setUserAnswer(transcript);\r\n        };\r\n\r\n        recognition.onerror = (event) => {\r\n            console.error(\"Speech recognition error:\", event.error);\r\n        };\r\n\r\n        recognition.start();\r\n    };\r\n\r\n    const handleSubmit = async () => {\r\n        if (!userAnswer.trim()) {\r\n            alert(\"Please provide an answer before submitting.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await axios.post(\"http://127.0.0.1:8000/api/submit-response/\", {\r\n                question_id: currentQuestionId,\r\n                user_answer: userAnswer,\r\n            });\r\n\r\n            if (response.status === 200) {\r\n                const data = response.data;\r\n                setSubmitMessage(data.message || \"Answer submitted successfully!\");\r\n                setUserAnswer(\"\");\r\n                fetchQuestion(currentQuestionId); // Fetch the next question\r\n            } else {\r\n                setSubmitMessage(\"An error occurred. Please try again.\");\r\n            }\r\n        } catch (err) {\r\n            if (err.response) {\r\n                setSubmitMessage(err.response.data.error || \"An error occurred. Please try again.\");\r\n            } else {\r\n                setSubmitMessage(\"A network error occurred. Please check your connection.\");\r\n            }\r\n        } finally {\r\n            clearInterval(submitTimerRef.current);\r\n        }\r\n    };\r\n\r\n    const handleSkipQuestion = () => {\r\n        setUserAnswer(\"\");\r\n        setSubmitMessage(\"\");\r\n        fetchQuestion(currentQuestionId); // Fetch the next question\r\n    };\r\n\r\n    const formatTime = (seconds) => {\r\n        const mins = Math.floor(seconds / 60);\r\n        const secs = seconds % 60;\r\n        return `${mins}:${secs < 10 ? \"0\" : \"\"}${secs}`;\r\n    };\r\n\r\n    if (loading) return <h1>Loading...</h1>;\r\n    if (error) return <h1>Error: {error}</h1>;\r\n\r\n    return (\r\n        <div style={{ textAlign: \"center\", padding: \"20px\" }}>\r\n            <h1>Interview Question</h1>\r\n            <h2>{isAnswering ? `Submit Time Left: ${formatTime(submitTimer)}` : `Answer Time Left: ${formatTime(answerTimer)}`}</h2>\r\n\r\n            {question && (\r\n                <div>\r\n                    <h2>{question.question}</h2>\r\n                    <p><strong>Difficulty:</strong> {question.difficulty}</p>\r\n                    <textarea\r\n                        value={userAnswer}\r\n                        onChange={(e) => setUserAnswer(e.target.value)}\r\n                        rows=\"4\"\r\n                        cols=\"50\"\r\n                    />\r\n                    <br />\r\n                    <button onClick={startAnswering} disabled={isAnswering}>\r\n                        Answer the Question\r\n                    </button>\r\n                    <button onClick={handleVoiceInput} disabled={!isAnswering}>\r\n                        Use Voice Input\r\n                    </button>\r\n                    <button onClick={handleSubmit} disabled={!isAnswering}>\r\n                        Submit Answer\r\n                    </button>\r\n                    <button onClick={handleSkipQuestion}>\r\n                        Skip Question\r\n                    </button>\r\n                </div>\r\n            )}\r\n            {submitMessage && <p>{submitMessage}</p>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InterviewPage;\r\n"],"mappings":";;AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;;AAIA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACrB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAC9C,MAAM,CAACU,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACc,UAAU,EAAEC,aAAa,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACgB,aAAa,EAAEC,gBAAgB,CAAC,GAAGjB,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACkB,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGnB,QAAQ,CAAC,IAAI,CAAC;EAC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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}