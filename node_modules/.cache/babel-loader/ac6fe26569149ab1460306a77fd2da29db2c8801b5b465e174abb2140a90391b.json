{"ast":null,"code":"var _jsxFileName = \"D:\\\\SIH\\\\RecruitSmart\\\\RecruitSmart Frontend\\\\src\\\\components\\\\UserDashboard\\\\Simulation\\\\Interviewpage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction InterviewPage() {\n  _s();\n  const [question, setQuestion] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [userAnswer, setUserAnswer] = useState(\"\");\n  const [submitMessage, setSubmitMessage] = useState(\"\");\n  const [currentQuestionId, setCurrentQuestionId] = useState(null);\n  const [answerTimer, setAnswerTimer] = useState(30); // 30 seconds for \"Answer the Question\"\n  const [submitTimer, setSubmitTimer] = useState(60); // 1 minute to submit after clicking \"Answer the Question\"\n  const [isAnswering, setIsAnswering] = useState(false);\n  const [score, setScore] = useState(0);\n  const answerTimerRef = useRef(null);\n  const submitTimerRef = useRef(null);\n\n  // Fetch the first question or the next question\n  const fetchQuestion = async (id = null) => {\n    try {\n      setLoading(true);\n      setQuestion(null); // Clear the current question while fetching the new one\n      const url = id ? `http://127.0.0.1:8000/api/fetch-next-question/?current_question_id=${id}` : \"http://127.0.0.1:8000/api/fetch-next-question/\";\n      const response = await axios.get(url);\n      const data = response.data;\n      if (data.message === \"No more questions available.\") {\n        setQuestion(null);\n        setSubmitMessage(\"Interview completed! Thank you.\");\n        clearInterval(answerTimerRef.current);\n        clearInterval(submitTimerRef.current);\n      } else {\n        setQuestion(data);\n        setCurrentQuestionId(data.id);\n        resetTimers();\n      }\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchQuestion();\n\n    // Timer for answering the question\n    answerTimerRef.current = setInterval(() => {\n      setAnswerTimer(prev => {\n        if (prev <= 1) {\n          clearInterval(answerTimerRef.current);\n          handleSkipQuestion(); // Skip to next question if not answered within 30 seconds\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    return () => clearInterval(answerTimerRef.current);\n  }, []);\n  const resetTimers = () => {\n    if (answerTimerRef.current) clearInterval(answerTimerRef.current);\n    if (submitTimerRef.current) clearInterval(submitTimerRef.current);\n    setAnswerTimer(30);\n    setSubmitTimer(30);\n    setIsAnswering(false);\n\n    // Restart answer timer\n    answerTimerRef.current = setInterval(() => {\n      setAnswerTimer(prev => {\n        if (prev <= 1) {\n          clearInterval(answerTimerRef.current);\n          handleSkipQuestion(); // Skip question if timer runs out\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n  const startAnswering = () => {\n    setIsAnswering(true);\n    if (answerTimerRef.current) clearInterval(answerTimerRef.current);\n\n    // Start submit timer\n    submitTimerRef.current = setInterval(() => {\n      setSubmitTimer(prev => {\n        if (prev <= 1) {\n          clearInterval(submitTimerRef.current);\n          handleSkipQuestion(); // Skip question if not submitted within 1 minute\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n  const handleVoiceInput = () => {\n    const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n    recognition.lang = \"en-US\";\n    recognition.interimResults = false;\n    recognition.onresult = event => {\n      const transcript = event.results[0][0].transcript;\n      setUserAnswer(transcript);\n    };\n    recognition.onerror = event => {\n      console.error(\"Speech recognition error:\", event.error);\n    };\n    recognition.start();\n  };\n\n  //     const handleSubmit = async () => {\n  //       if (!userAnswer.trim()) {\n  //           alert(\"Please provide an answer before submitting.\");\n  //           return;\n  //       }\n\n  //       try {\n  //           // Make the POST request using Axios\n  //           const response = await axios.post(\"http://127.0.0.1:8000/api/submit-response/\", {\n  //               question_id: currentQuestionId,\n  //               user_answer: userAnswer,\n  //           });\n\n  //           // Check if the response contains the success message\n  //           if (response.status === 200) {\n  //               const data = response.data;\n  //               setSubmitMessage(data.message || \"Answer submitted successfully!\");\n  //               setUserAnswer(\"\");\n  //               fetchQuestion(currentQuestionId); // Fetch the next question\n  //           } else {\n  //               // Handle unexpected responses\n  //               setSubmitMessage(\"An error occurred. Please try again.\");\n  //           }\n  //       } catch (err) {\n  //           // Handle request errors\n  //           if (err.response) {\n  //               setSubmitMessage(err.response.data.error || \"An error occurred. Please try again.\");\n  //           } else {\n  //               setSubmitMessage(\"A network error occurred. Please check your connection.\");\n  //           }\n  //       } finally {\n  //           if (submitTimerRef.current) clearInterval(submitTimerRef.current);\n  //       }\n  //   };\n\n  const handleSubmit = async () => {\n    if (!userAnswer.trim()) {\n      alert(\"Please provide an answer before submitting.\");\n      return;\n    }\n    try {\n      const response = await axios.post(\"http://127.0.0.1:8000/api/submit-response/\", {\n        question_id: currentQuestionId,\n        user_answer: userAnswer\n      });\n      if (response.status === 200) {\n        const data = response.data;\n        setSubmitMessage(data.message || \"Answer submitted successfully!\");\n        setScore(data.score); // Set score from the response\n        setUserAnswer(\"\");\n        fetchQuestion(currentQuestionId); // Fetch the next question\n      } else {\n        setSubmitMessage(\"An error occurred. Please try again.\");\n      }\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error(\"Error submitting response:\", err); // Log the error for debugging\n      setSubmitMessage(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || \"A network error occurred. Please check your connection.\");\n    } finally {\n      if (submitTimerRef.current) clearInterval(submitTimerRef.current);\n    }\n  };\n  const handleSkipQuestion = () => {\n    setUserAnswer(\"\");\n    setSubmitMessage(\"\");\n    setScore(0);\n    fetchQuestion(currentQuestionId); // Fetch the next question\n  };\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs < 10 ? \"0\" : \"\"}${secs}`;\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 211,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 212,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Interview Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: isAnswering ? `Submit Time Left: ${formatTime(submitTimer)}` : `Answer Time Left: ${formatTime(answerTimer)}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 217,\n      columnNumber: 13\n    }, this), question && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: question.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Difficulty:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 24\n        }, this), \" \", question.difficulty]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Your Answer:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: userAnswer,\n          onChange: e => setUserAnswer(e.target.value),\n          rows: \"4\",\n          cols: \"50\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: userAnswer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startAnswering,\n        disabled: isAnswering,\n        children: \"Answer the Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleVoiceInput,\n        disabled: !isAnswering,\n        children: \"Use Voice Input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 236,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        disabled: !isAnswering,\n        children: \"Submit Answer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSkipQuestion,\n        children: \"Go to Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 17\n    }, this), submitMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: submitMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 31\n    }, this), score && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 215,\n    columnNumber: 9\n  }, this);\n}\n_s(InterviewPage, \"+8UAEGaN0Ra482kWTFxc+B6SnPY=\");\n_c = InterviewPage;\nexport default InterviewPage;\nvar _c;\n$RefreshReg$(_c, \"InterviewPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","jsxDEV","_jsxDEV","InterviewPage","_s","question","setQuestion","loading","setLoading","error","setError","userAnswer","setUserAnswer","submitMessage","setSubmitMessage","currentQuestionId","setCurrentQuestionId","answerTimer","setAnswerTimer","submitTimer","setSubmitTimer","isAnswering","setIsAnswering","score","setScore","answerTimerRef","submitTimerRef","fetchQuestion","id","url","response","get","data","message","clearInterval","current","resetTimers","err","setInterval","prev","handleSkipQuestion","startAnswering","handleVoiceInput","recognition","window","SpeechRecognition","webkitSpeechRecognition","lang","interimResults","onresult","event","transcript","results","onerror","console","start","handleSubmit","trim","alert","post","question_id","user_answer","status","_err$response","_err$response$data","formatTime","seconds","mins","Math","floor","secs","children","fileName","_jsxFileName","lineNumber","columnNumber","style","textAlign","padding","difficulty","value","onChange","e","target","rows","cols","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/SIH/RecruitSmart/RecruitSmart Frontend/src/components/UserDashboard/Simulation/Interviewpage.jsx"],"sourcesContent":["\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport axios from \"axios\";\r\n\r\n\r\nfunction InterviewPage() {\r\n    const [question, setQuestion] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [userAnswer, setUserAnswer] = useState(\"\");\r\n    const [submitMessage, setSubmitMessage] = useState(\"\");\r\n    const [currentQuestionId, setCurrentQuestionId] = useState(null);\r\n    const [answerTimer, setAnswerTimer] = useState(30); // 30 seconds for \"Answer the Question\"\r\n    const [submitTimer, setSubmitTimer] = useState(60); // 1 minute to submit after clicking \"Answer the Question\"\r\n    const [isAnswering, setIsAnswering] = useState(false);\r\n    const [score, setScore] = useState(0);\r\n\r\n\r\n    const answerTimerRef = useRef(null);\r\n    const submitTimerRef = useRef(null);\r\n\r\n    // Fetch the first question or the next question\r\n    const fetchQuestion = async (id = null) => {\r\n      try {\r\n          setLoading(true);\r\n          setQuestion(null); // Clear the current question while fetching the new one\r\n          const url = id\r\n              ? `http://127.0.0.1:8000/api/fetch-next-question/?current_question_id=${id}`\r\n              : \"http://127.0.0.1:8000/api/fetch-next-question/\";\r\n          const response = await axios.get(url);\r\n          const data = response.data;\r\n  \r\n          if (data.message === \"No more questions available.\") {\r\n              setQuestion(null);\r\n              setSubmitMessage(\"Interview completed! Thank you.\");\r\n              clearInterval(answerTimerRef.current);\r\n              clearInterval(submitTimerRef.current);\r\n          } else {\r\n              setQuestion(data);\r\n              setCurrentQuestionId(data.id);\r\n              resetTimers();\r\n          }\r\n      } catch (err) {\r\n          setError(err.message);\r\n      } finally {\r\n          setLoading(false);\r\n      }\r\n  };\r\n  \r\n\r\n    useEffect(() => {\r\n        fetchQuestion();\r\n\r\n        // Timer for answering the question\r\n        answerTimerRef.current = setInterval(() => {\r\n            setAnswerTimer((prev) => {\r\n                if (prev <= 1) {\r\n                    clearInterval(answerTimerRef.current);\r\n                    handleSkipQuestion(); // Skip to next question if not answered within 30 seconds\r\n                    return 0;\r\n                }\r\n                return prev - 1;\r\n            });\r\n        }, 1000);\r\n\r\n        return () => clearInterval(answerTimerRef.current);\r\n    }, []);\r\n\r\n    const resetTimers = () => {\r\n      if (answerTimerRef.current) clearInterval(answerTimerRef.current);\r\n      if (submitTimerRef.current) clearInterval(submitTimerRef.current);\r\n  \r\n      setAnswerTimer(30);\r\n      setSubmitTimer(30);\r\n      setIsAnswering(false);\r\n  \r\n      // Restart answer timer\r\n      answerTimerRef.current = setInterval(() => {\r\n          setAnswerTimer((prev) => {\r\n              if (prev <= 1) {\r\n                  clearInterval(answerTimerRef.current);\r\n                  handleSkipQuestion(); // Skip question if timer runs out\r\n                  return 0;\r\n              }\r\n              return prev - 1;\r\n          });\r\n      }, 1000);\r\n  };\r\n  \r\n\r\n    const startAnswering = () => {\r\n        setIsAnswering(true);\r\n        if (answerTimerRef.current) clearInterval(answerTimerRef.current);\r\n\r\n        // Start submit timer\r\n        submitTimerRef.current = setInterval(() => {\r\n            setSubmitTimer((prev) => {\r\n                if (prev <= 1) {\r\n                    clearInterval(submitTimerRef.current);\r\n                    handleSkipQuestion(); // Skip question if not submitted within 1 minute\r\n                    return 0;\r\n                }\r\n                return prev - 1;\r\n            });\r\n        }, 1000);\r\n    };\r\n\r\n    const handleVoiceInput = () => {\r\n        const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\r\n        recognition.lang = \"en-US\";\r\n        recognition.interimResults = false;\r\n\r\n        recognition.onresult = (event) => {\r\n            const transcript = event.results[0][0].transcript;\r\n            setUserAnswer(transcript);\r\n        };\r\n\r\n        recognition.onerror = (event) => {\r\n            console.error(\"Speech recognition error:\", event.error);\r\n        };\r\n\r\n        recognition.start();\r\n    };\r\n\r\n//     const handleSubmit = async () => {\r\n//       if (!userAnswer.trim()) {\r\n//           alert(\"Please provide an answer before submitting.\");\r\n//           return;\r\n//       }\r\n  \r\n//       try {\r\n//           // Make the POST request using Axios\r\n//           const response = await axios.post(\"http://127.0.0.1:8000/api/submit-response/\", {\r\n//               question_id: currentQuestionId,\r\n//               user_answer: userAnswer,\r\n//           });\r\n  \r\n//           // Check if the response contains the success message\r\n//           if (response.status === 200) {\r\n//               const data = response.data;\r\n//               setSubmitMessage(data.message || \"Answer submitted successfully!\");\r\n//               setUserAnswer(\"\");\r\n//               fetchQuestion(currentQuestionId); // Fetch the next question\r\n//           } else {\r\n//               // Handle unexpected responses\r\n//               setSubmitMessage(\"An error occurred. Please try again.\");\r\n//           }\r\n//       } catch (err) {\r\n//           // Handle request errors\r\n//           if (err.response) {\r\n//               setSubmitMessage(err.response.data.error || \"An error occurred. Please try again.\");\r\n//           } else {\r\n//               setSubmitMessage(\"A network error occurred. Please check your connection.\");\r\n//           }\r\n//       } finally {\r\n//           if (submitTimerRef.current) clearInterval(submitTimerRef.current);\r\n//       }\r\n//   };\r\n\r\nconst handleSubmit = async () => {\r\n    if (!userAnswer.trim()) {\r\n        alert(\"Please provide an answer before submitting.\");\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const response = await axios.post(\r\n            \"http://127.0.0.1:8000/api/submit-response/\",\r\n            {\r\n                question_id: currentQuestionId,\r\n                user_answer: userAnswer,\r\n            }\r\n        );\r\n\r\n        if (response.status === 200) {\r\n            const data = response.data;\r\n            setSubmitMessage(data.message || \"Answer submitted successfully!\");\r\n            setScore(data.score); // Set score from the response\r\n            setUserAnswer(\"\");\r\n            fetchQuestion(currentQuestionId); // Fetch the next question\r\n        } else {\r\n            setSubmitMessage(\"An error occurred. Please try again.\");\r\n        }\r\n    } catch (err) {\r\n        console.error(\"Error submitting response:\", err); // Log the error for debugging\r\n        setSubmitMessage(\r\n            err.response?.data?.error || \"A network error occurred. Please check your connection.\"\r\n        );\r\n    } finally {\r\n        if (submitTimerRef.current) clearInterval(submitTimerRef.current);\r\n    }\r\n};\r\n\r\n\r\n  \r\n  \r\n  const handleSkipQuestion = () => {\r\n      setUserAnswer(\"\");\r\n      setSubmitMessage(\"\");\r\n      setScore(0);\r\n      fetchQuestion(currentQuestionId); // Fetch the next question\r\n  };\r\n  \r\n\r\n    const formatTime = (seconds) => {\r\n        const mins = Math.floor(seconds / 60);\r\n        const secs = seconds % 60;\r\n        return `${mins}:${secs < 10 ? \"0\" : \"\"}${secs}`;\r\n    };\r\n\r\n    if (loading) return <h1>Loading...</h1>;\r\n    if (error) return <h1>Error: {error}</h1>;\r\n\r\n    return (\r\n        <div style={{ textAlign: \"center\", padding: \"20px\" }}>\r\n            <h1>Interview Question</h1>\r\n            <h2>{isAnswering ? `Submit Time Left: ${formatTime(submitTimer)}` : `Answer Time Left: ${formatTime(answerTimer)}`}</h2>\r\n\r\n            {question && (\r\n                <div>\r\n                    <h2>{question.question}</h2>\r\n                    <p><strong>Difficulty:</strong> {question.difficulty}</p>\r\n                    <div>\r\n                        <h3>Your Answer:</h3>\r\n                        <textarea\r\n                            value={userAnswer}\r\n                            onChange={(e) => setUserAnswer(e.target.value)}\r\n                            rows=\"4\"\r\n                            cols=\"50\"\r\n                        />\r\n                        <p>{userAnswer}</p>\r\n                    </div>\r\n                    <button onClick={startAnswering} disabled={isAnswering}>\r\n                        Answer the Question\r\n                    </button>\r\n                    <button onClick={handleVoiceInput} disabled={!isAnswering}>\r\n                        Use Voice Input\r\n                    </button>\r\n                    <button onClick={handleSubmit} disabled={!isAnswering}>\r\n                        Submit Answer\r\n                    </button>\r\n                    <button onClick={handleSkipQuestion}>\r\n                        Go to Next Question\r\n                    </button>\r\n                </div>\r\n            )}\r\n            {submitMessage && <p>{submitMessage}</p>}\r\n            {score && <p>{score}</p>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InterviewPage;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}