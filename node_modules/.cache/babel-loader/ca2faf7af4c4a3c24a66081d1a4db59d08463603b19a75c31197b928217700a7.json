{"ast":null,"code":"var _jsxFileName = \"D:\\\\SIH\\\\RecruitSmart\\\\RecruitSmart Frontend\\\\src\\\\components\\\\UserDashboard\\\\Simulation\\\\Interviewpage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useParams } from \"react-router-dom\"; // Import useParams\nimport axios from \"axios\";\nimport Webcam from \"react-webcam\";\nimport * as faceapi from \"@vladmandic/face-api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction InterviewPage() {\n  _s();\n  const {\n    command_id\n  } = useParams(); // Get command_id from URL params\n  const [question, setQuestion] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [userAnswer, setUserAnswer] = useState(\"\");\n  const [submitMessage, setSubmitMessage] = useState(\"\");\n  const [currentQuestionId, setCurrentQuestionId] = useState(null);\n  const [answerTimer, setAnswerTimer] = useState(30); // 30 seconds for \"Answer the Question\"\n  const [submitTimer, setSubmitTimer] = useState(60); // 1 minute to submit after clicking \"Answer the Question\"\n  const [isAnswering, setIsAnswering] = useState(false);\n  const [score, setScore] = useState(0);\n  const webcamRef = useRef(null);\n  const [initialImage, setInitialImage] = useState(null);\n  const [isVerified, setIsVerified] = useState(true);\n  const answerTimerRef = useRef(null);\n  const submitTimerRef = useRef(null);\n  const loadModels = async () => {\n    const MODEL_URL = \"/models\"; // Ensure these are hosted in the `public/models` folder\n    await faceapi.nets.ssdMobilenetv1.loadFromUri(MODEL_URL);\n    await faceapi.nets.faceRecognitionNet.loadFromUri(MODEL_URL);\n    await faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URL);\n  };\n\n  // Load the initial image from public folder\n  const loadInitialImage = async () => {\n    const img = await faceapi.fetchImage(\"/initial-id-image.jpg\"); // Replace with the actual file path\n    setInitialImage(img);\n  };\n\n  // Function to convert data URL to Blob\n  // const dataURLtoBlob = (dataURL) => {\n  //     const [metadata, base64Data] = dataURL.split(',');\n  //     const mimeString = metadata.split(':')[1].split(';')[0]; // Get mime type\n  //     const byteCharacters = atob(base64Data); // Decode base64 string\n  //     const byteArrays = [];\n\n  //     for (let offset = 0; offset < byteCharacters.length; offset += 1024) {\n  //         const slice = byteCharacters.slice(offset, offset + 1024);\n  //         const byteNumbers = new Array(slice.length);\n\n  //         for (let i = 0; i < slice.length; i++) {\n  //             byteNumbers[i] = slice.charCodeAt(i);\n  //         }\n\n  //         const byteArray = new Uint8Array(byteNumbers);\n  //         byteArrays.push(byteArray);\n  //     }\n\n  //     return new Blob(byteArrays, { type: mimeString });\n  // };\n\n  // Compare faces using face-api.js\n  const verifyIdentity = async () => {\n    if (!initialImage || !webcamRef.current) return;\n    const webcamImage = webcamRef.current.getScreenshot(); // Capture frame\n    if (!webcamImage) return;\n\n    // Convert webcam image to tensor\n    const capturedImage = await faceapi.bufferToImage(dataURLtoBlob(webcamImage));\n\n    // Detect face descriptors for initial image and captured image\n    const initialFace = await faceapi.detectSingleFace(initialImage).withFaceLandmarks().withFaceDescriptor();\n    const capturedFace = await faceapi.detectSingleFace(capturedImage).withFaceLandmarks().withFaceDescriptor();\n    if (!initialFace || !capturedFace) {\n      setIsVerified(false);\n      alert(\"Face not detected in one of the images.\");\n      return;\n    }\n\n    // Compare face descriptors\n    const distance = faceapi.euclideanDistance(initialFace.descriptor, capturedFace.descriptor);\n    const threshold = 0.6; // Adjust threshold based on testing\n\n    if (distance > threshold) {\n      setIsVerified(false);\n      alert(\"Face does not match! Identity verification failed.\");\n    } else {\n      setIsVerified(true);\n    }\n  };\n\n  // Fetch the first question or the next question\n  const fetchQuestion = async (id = null) => {\n    try {\n      setLoading(true);\n      setQuestion(null); // Clear the current question while fetching the new one\n      const url = id ? `http://127.0.0.1:8000/api/fetch-next-question/?current_question_id=${id}&command_id=${command_id}` : `http://127.0.0.1:8000/api/fetch-next-question/?&command_id=${command_id}`;\n      const response = await axios.get(url);\n      const data = response.data;\n      if (data.message === \"No more questions available.\") {\n        setQuestion(null);\n        setSubmitMessage(\"Interview completed! Thank you.\");\n        clearInterval(answerTimerRef.current);\n        clearInterval(submitTimerRef.current);\n      } else {\n        setQuestion(data);\n        setCurrentQuestionId(data.id);\n        resetTimers();\n        speakText(data.question);\n      }\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  useEffect(() => {\n    fetchQuestion();\n    const loadModelsAndInitialImage = async () => {\n      await loadModels(); // Load face-api models\n      await loadInitialImage(); // Load initial image from public folder\n    };\n    loadModelsAndInitialImage();\n\n    // Timer for answering the question\n    answerTimerRef.current = setInterval(() => {\n      setAnswerTimer(prev => {\n        if (prev <= 1) {\n          clearInterval(answerTimerRef.current);\n          handleSkipQuestion(); // Skip to next question if not answered within 30 seconds\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    return () => clearInterval(answerTimerRef.current);\n  }, []);\n  const resetTimers = () => {\n    if (answerTimerRef.current) clearInterval(answerTimerRef.current);\n    if (submitTimerRef.current) clearInterval(submitTimerRef.current);\n    setAnswerTimer(30);\n    setSubmitTimer(30);\n    setIsAnswering(false);\n\n    // Restart answer timer\n    answerTimerRef.current = setInterval(() => {\n      setAnswerTimer(prev => {\n        if (prev <= 1) {\n          clearInterval(answerTimerRef.current);\n          handleSkipQuestion(); // Skip question if timer runs out\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n  const startAnswering = () => {\n    setIsAnswering(true);\n    if (answerTimerRef.current) clearInterval(answerTimerRef.current);\n\n    // Start submit timer\n    submitTimerRef.current = setInterval(() => {\n      setSubmitTimer(prev => {\n        if (prev <= 1) {\n          clearInterval(submitTimerRef.current);\n          handleSkipQuestion(); // Skip question if not submitted within 1 minute\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n  const handleVoiceInput = () => {\n    const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n    recognition.lang = \"en-US\";\n    recognition.interimResults = false;\n    recognition.onresult = event => {\n      const transcript = event.results[0][0].transcript;\n      setUserAnswer(transcript);\n    };\n    recognition.onerror = event => {\n      console.error(\"Speech recognition error:\", event.error);\n    };\n    recognition.start();\n  };\n  const handleSubmit = async () => {\n    if (!userAnswer.trim()) {\n      alert(\"Please provide an answer before submitting.\");\n      return;\n    }\n    try {\n      const response = await axios.post(\"http://127.0.0.1:8000/api/submit-response/\", {\n        question_id: currentQuestionId,\n        user_answer: userAnswer\n      });\n      if (response.status === 200) {\n        const data = response.data;\n        setSubmitMessage(data.message || \"Answer submitted successfully!\");\n        setScore(data.score); // Set score from the response\n        setUserAnswer(\"\");\n        fetchQuestion(currentQuestionId); // Fetch the next question\n      } else {\n        setSubmitMessage(\"An error occurred. Please try again.\");\n      }\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error(\"Error submitting response:\", err); // Log the error for debugging\n      setSubmitMessage(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || \"A network error occurred. Please check your connection.\");\n    } finally {\n      if (submitTimerRef.current) clearInterval(submitTimerRef.current);\n    }\n  };\n  const speakText = text => {\n    const synth = window.speechSynthesis;\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.lang = \"en-US\";\n    utterance.rate = 1; // Adjust rate as needed\n    synth.speak(utterance);\n  };\n  const handleSkipQuestion = () => {\n    setUserAnswer(\"\");\n    setSubmitMessage(\"\");\n    setScore(0);\n    fetchQuestion(currentQuestionId); // Fetch the next question\n  };\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs < 10 ? \"0\" : \"\"}${secs}`;\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 268,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 269,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Interview Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 273,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: isAnswering ? `Submit Time Left: ${formatTime(submitTimer)}` : `Answer Time Left: ${formatTime(answerTimer)}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(Webcam, {\n        audio: false,\n        ref: webcamRef,\n        screenshotFormat: \"image/jpeg\",\n        videoConstraints: {\n          width: 640,\n          height: 480,\n          facingMode: \"user\"\n        },\n        style: {\n          border: \"2px solid black\",\n          borderRadius: \"10px\",\n          marginBottom: \"10px\"\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: verifyIdentity,\n      style: {\n        padding: \"10px 20px\",\n        fontSize: \"16px\"\n      },\n      children: \"Verify Identity\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 13\n    }, this), question && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: question.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 291,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Difficulty:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 24\n        }, this), \" \", question.difficulty]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 292,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Your Answer:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: userAnswer,\n          onChange: e => setUserAnswer(e.target.value),\n          rows: \"4\",\n          cols: \"50\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: userAnswer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startAnswering,\n        disabled: isAnswering,\n        children: \"Answer the Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 303,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleVoiceInput,\n        disabled: !isAnswering,\n        children: \"Use Voice Input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 306,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        disabled: !isAnswering,\n        children: \"Submit Answer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSkipQuestion,\n        children: \"Go to Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 312,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 17\n    }, this), submitMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: submitMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 317,\n      columnNumber: 31\n    }, this), score && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 23\n    }, this), !isVerified && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: \"red\"\n      },\n      children: \"Identity verification failed.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 29\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 272,\n    columnNumber: 9\n  }, this);\n}\n_s(InterviewPage, \"TF7aq2SEDgrOp29LEKCB9LtJY1k=\", false, function () {\n  return [useParams];\n});\n_c = InterviewPage;\nexport default InterviewPage;\nvar _c;\n$RefreshReg$(_c, \"InterviewPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","axios","Webcam","faceapi","jsxDEV","_jsxDEV","InterviewPage","_s","command_id","question","setQuestion","loading","setLoading","error","setError","userAnswer","setUserAnswer","submitMessage","setSubmitMessage","currentQuestionId","setCurrentQuestionId","answerTimer","setAnswerTimer","submitTimer","setSubmitTimer","isAnswering","setIsAnswering","score","setScore","webcamRef","initialImage","setInitialImage","isVerified","setIsVerified","answerTimerRef","submitTimerRef","loadModels","MODEL_URL","nets","ssdMobilenetv1","loadFromUri","faceRecognitionNet","faceLandmark68Net","loadInitialImage","img","fetchImage","verifyIdentity","current","webcamImage","getScreenshot","capturedImage","bufferToImage","dataURLtoBlob","initialFace","detectSingleFace","withFaceLandmarks","withFaceDescriptor","capturedFace","alert","distance","euclideanDistance","descriptor","threshold","fetchQuestion","id","url","response","get","data","message","clearInterval","resetTimers","speakText","err","loadModelsAndInitialImage","setInterval","prev","handleSkipQuestion","startAnswering","handleVoiceInput","recognition","window","SpeechRecognition","webkitSpeechRecognition","lang","interimResults","onresult","event","transcript","results","onerror","console","start","handleSubmit","trim","post","question_id","user_answer","status","_err$response","_err$response$data","text","synth","speechSynthesis","utterance","SpeechSynthesisUtterance","rate","speak","formatTime","seconds","mins","Math","floor","secs","children","fileName","_jsxFileName","lineNumber","columnNumber","style","textAlign","padding","audio","ref","screenshotFormat","videoConstraints","width","height","facingMode","border","borderRadius","marginBottom","onClick","fontSize","difficulty","value","onChange","e","target","rows","cols","disabled","color","_c","$RefreshReg$"],"sources":["D:/SIH/RecruitSmart/RecruitSmart Frontend/src/components/UserDashboard/Simulation/Interviewpage.jsx"],"sourcesContent":["\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { useParams } from \"react-router-dom\"; // Import useParams\r\nimport axios from \"axios\";\r\nimport Webcam from \"react-webcam\";\r\nimport * as faceapi from \"@vladmandic/face-api\";\r\n\r\nfunction InterviewPage() {\r\n    const { command_id } = useParams(); // Get command_id from URL params\r\n    const [question, setQuestion] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [userAnswer, setUserAnswer] = useState(\"\");\r\n    const [submitMessage, setSubmitMessage] = useState(\"\");\r\n    const [currentQuestionId, setCurrentQuestionId] = useState(null);\r\n    const [answerTimer, setAnswerTimer] = useState(30); // 30 seconds for \"Answer the Question\"\r\n    const [submitTimer, setSubmitTimer] = useState(60); // 1 minute to submit after clicking \"Answer the Question\"\r\n    const [isAnswering, setIsAnswering] = useState(false);\r\n    const [score, setScore] = useState(0);\r\n    const webcamRef = useRef(null);\r\n\r\n  \r\n    const [initialImage, setInitialImage] = useState(null);\r\n    const [isVerified, setIsVerified] = useState(true);\r\n    const answerTimerRef = useRef(null);\r\n    const submitTimerRef = useRef(null);\r\n\r\n    const loadModels = async () => {\r\n        const MODEL_URL = \"/models\"; // Ensure these are hosted in the `public/models` folder\r\n        await faceapi.nets.ssdMobilenetv1.loadFromUri(MODEL_URL);\r\n        await faceapi.nets.faceRecognitionNet.loadFromUri(MODEL_URL);\r\n        await faceapi.nets.faceLandmark68Net.loadFromUri(MODEL_URL);\r\n    };\r\n\r\n    // Load the initial image from public folder\r\n    const loadInitialImage = async () => {\r\n        const img = await faceapi.fetchImage(\"/initial-id-image.jpg\"); // Replace with the actual file path\r\n        setInitialImage(img);\r\n    };\r\n\r\n    // Function to convert data URL to Blob\r\n// const dataURLtoBlob = (dataURL) => {\r\n//     const [metadata, base64Data] = dataURL.split(',');\r\n//     const mimeString = metadata.split(':')[1].split(';')[0]; // Get mime type\r\n//     const byteCharacters = atob(base64Data); // Decode base64 string\r\n//     const byteArrays = [];\r\n\r\n//     for (let offset = 0; offset < byteCharacters.length; offset += 1024) {\r\n//         const slice = byteCharacters.slice(offset, offset + 1024);\r\n//         const byteNumbers = new Array(slice.length);\r\n\r\n//         for (let i = 0; i < slice.length; i++) {\r\n//             byteNumbers[i] = slice.charCodeAt(i);\r\n//         }\r\n\r\n//         const byteArray = new Uint8Array(byteNumbers);\r\n//         byteArrays.push(byteArray);\r\n//     }\r\n\r\n//     return new Blob(byteArrays, { type: mimeString });\r\n// };\r\n\r\n    // Compare faces using face-api.js\r\n    const verifyIdentity = async () => {\r\n        if (!initialImage || !webcamRef.current) return;\r\n\r\n        const webcamImage = webcamRef.current.getScreenshot(); // Capture frame\r\n        if (!webcamImage) return;\r\n\r\n        // Convert webcam image to tensor\r\n        const capturedImage = await faceapi.bufferToImage(dataURLtoBlob(webcamImage));\r\n\r\n        // Detect face descriptors for initial image and captured image\r\n        const initialFace = await faceapi.detectSingleFace(initialImage).withFaceLandmarks().withFaceDescriptor();\r\n        const capturedFace = await faceapi.detectSingleFace(capturedImage).withFaceLandmarks().withFaceDescriptor();\r\n\r\n        if (!initialFace || !capturedFace) {\r\n            setIsVerified(false);\r\n            alert(\"Face not detected in one of the images.\");\r\n            return;\r\n        }\r\n\r\n        // Compare face descriptors\r\n        const distance = faceapi.euclideanDistance(initialFace.descriptor, capturedFace.descriptor);\r\n        const threshold = 0.6; // Adjust threshold based on testing\r\n\r\n        if (distance > threshold) {\r\n            setIsVerified(false);\r\n            alert(\"Face does not match! Identity verification failed.\");\r\n        } else {\r\n            setIsVerified(true);\r\n        }\r\n    };\r\n\r\n\r\n    // Fetch the first question or the next question\r\n    const fetchQuestion = async (id = null) => {\r\n      try {\r\n          setLoading(true);\r\n          setQuestion(null); // Clear the current question while fetching the new one\r\n          const url = id\r\n          ? `http://127.0.0.1:8000/api/fetch-next-question/?current_question_id=${id}&command_id=${command_id}`\r\n          : `http://127.0.0.1:8000/api/fetch-next-question/?&command_id=${command_id}`;\r\n          const response = await axios.get(url);\r\n          const data = response.data;\r\n  \r\n          if (data.message === \"No more questions available.\") {\r\n              setQuestion(null);\r\n              setSubmitMessage(\"Interview completed! Thank you.\");\r\n              clearInterval(answerTimerRef.current);\r\n              clearInterval(submitTimerRef.current);\r\n          } else {\r\n              setQuestion(data);\r\n              setCurrentQuestionId(data.id);\r\n              resetTimers();\r\n              speakText(data.question);\r\n          }\r\n      } catch (err) {\r\n          setError(err.message);\r\n      } finally {\r\n          setLoading(false);\r\n      }\r\n  };\r\n  \r\n\r\n    useEffect(() => {\r\n        fetchQuestion();\r\n\r\n        \r\n        const loadModelsAndInitialImage = async () => {\r\n            await loadModels();  // Load face-api models\r\n            await loadInitialImage();  // Load initial image from public folder\r\n        };\r\n        loadModelsAndInitialImage();\r\n\r\n        // Timer for answering the question\r\n        answerTimerRef.current = setInterval(() => {\r\n            setAnswerTimer((prev) => {\r\n                if (prev <= 1) {\r\n                    clearInterval(answerTimerRef.current);\r\n                    handleSkipQuestion(); // Skip to next question if not answered within 30 seconds\r\n                    return 0;\r\n                }\r\n                return prev - 1;\r\n            });\r\n        }, 1000);\r\n\r\n        return () => clearInterval(answerTimerRef.current);\r\n    }, []);\r\n\r\n    const resetTimers = () => {\r\n      if (answerTimerRef.current) clearInterval(answerTimerRef.current);\r\n      if (submitTimerRef.current) clearInterval(submitTimerRef.current);\r\n  \r\n      setAnswerTimer(30);\r\n      setSubmitTimer(30);\r\n      setIsAnswering(false);\r\n  \r\n      // Restart answer timer\r\n      answerTimerRef.current = setInterval(() => {\r\n          setAnswerTimer((prev) => {\r\n              if (prev <= 1) {\r\n                  clearInterval(answerTimerRef.current);\r\n                  handleSkipQuestion(); // Skip question if timer runs out\r\n                  return 0;\r\n              }\r\n              return prev - 1;\r\n          });\r\n      }, 1000);\r\n  };\r\n  \r\n\r\n    const startAnswering = () => {\r\n        setIsAnswering(true);\r\n        if (answerTimerRef.current) clearInterval(answerTimerRef.current);\r\n\r\n        // Start submit timer\r\n        submitTimerRef.current = setInterval(() => {\r\n            setSubmitTimer((prev) => {\r\n                if (prev <= 1) {\r\n                    clearInterval(submitTimerRef.current);\r\n                    handleSkipQuestion(); // Skip question if not submitted within 1 minute\r\n                    return 0;\r\n                }\r\n                return prev - 1;\r\n            });\r\n        }, 1000);\r\n    };\r\n\r\n    const handleVoiceInput = () => {\r\n        const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\r\n        recognition.lang = \"en-US\";\r\n        recognition.interimResults = false;\r\n\r\n        recognition.onresult = (event) => {\r\n            const transcript = event.results[0][0].transcript;\r\n            setUserAnswer(transcript);\r\n        };\r\n\r\n        recognition.onerror = (event) => {\r\n            console.error(\"Speech recognition error:\", event.error);\r\n        };\r\n\r\n        recognition.start();\r\n    };\r\n\r\n\r\nconst handleSubmit = async () => {\r\n    if (!userAnswer.trim()) {\r\n        alert(\"Please provide an answer before submitting.\");\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const response = await axios.post(\r\n            \"http://127.0.0.1:8000/api/submit-response/\",\r\n            {\r\n                question_id: currentQuestionId,\r\n                user_answer: userAnswer,\r\n            }\r\n        );\r\n\r\n        if (response.status === 200) {\r\n            const data = response.data;\r\n            setSubmitMessage(data.message || \"Answer submitted successfully!\");\r\n            setScore(data.score); // Set score from the response\r\n            setUserAnswer(\"\");\r\n            fetchQuestion(currentQuestionId); // Fetch the next question\r\n        } else {\r\n            setSubmitMessage(\"An error occurred. Please try again.\");\r\n        }\r\n    } catch (err) {\r\n        console.error(\"Error submitting response:\", err); // Log the error for debugging\r\n        setSubmitMessage(\r\n            err.response?.data?.error || \"A network error occurred. Please check your connection.\"\r\n        );\r\n    } finally {\r\n        if (submitTimerRef.current) clearInterval(submitTimerRef.current);\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\nconst speakText = (text) => {\r\n    const synth = window.speechSynthesis;\r\n    const utterance = new SpeechSynthesisUtterance(text);\r\n    utterance.lang = \"en-US\";\r\n    utterance.rate = 1; // Adjust rate as needed\r\n    synth.speak(utterance);\r\n};\r\n  \r\n  \r\n  const handleSkipQuestion = () => {\r\n      setUserAnswer(\"\");\r\n      setSubmitMessage(\"\");\r\n      setScore(0);\r\n      fetchQuestion(currentQuestionId); // Fetch the next question\r\n  };\r\n  \r\n\r\n    const formatTime = (seconds) => {\r\n        const mins = Math.floor(seconds / 60);\r\n        const secs = seconds % 60;\r\n        return `${mins}:${secs < 10 ? \"0\" : \"\"}${secs}`;\r\n    };\r\n\r\n    if (loading) return <h1>Loading...</h1>;\r\n    if (error) return <h1>Error: {error}</h1>;\r\n\r\n    return (\r\n        <div style={{ textAlign: \"center\", padding: \"20px\" }}>\r\n            <h1>Interview Question</h1>\r\n            <h2>{isAnswering ? `Submit Time Left: ${formatTime(submitTimer)}` : `Answer Time Left: ${formatTime(answerTimer)}`}</h2>\r\n            \r\n            <div>\r\n                <Webcam\r\n                    audio={false}\r\n                    ref={webcamRef}\r\n                    screenshotFormat=\"image/jpeg\"\r\n                    videoConstraints={{ width: 640, height: 480, facingMode: \"user\" }}\r\n                    style={{ border: \"2px solid black\", borderRadius: \"10px\", marginBottom: \"10px\" }}\r\n                />\r\n            </div>\r\n            <button onClick={verifyIdentity} style={{ padding: \"10px 20px\", fontSize: \"16px\" }}>\r\n                Verify Identity\r\n            </button>\r\n\r\n            {question && (\r\n                <div>\r\n                    <h2>{question.question}</h2>\r\n                    <p><strong>Difficulty:</strong> {question.difficulty}</p>\r\n                    <div>\r\n                        <h3>Your Answer:</h3>\r\n                        <textarea\r\n                            value={userAnswer}\r\n                            onChange={(e) => setUserAnswer(e.target.value)}\r\n                            rows=\"4\"\r\n                            cols=\"50\"\r\n                        />\r\n                        <p>{userAnswer}</p>\r\n                    </div>\r\n                    <button onClick={startAnswering} disabled={isAnswering}>\r\n                        Answer the Question\r\n                    </button>\r\n                    <button onClick={handleVoiceInput} disabled={!isAnswering}>\r\n                        Use Voice Input\r\n                    </button>\r\n                    <button onClick={handleSubmit} disabled={!isAnswering}>\r\n                        Submit Answer\r\n                    </button>\r\n                    <button onClick={handleSkipQuestion}>\r\n                        Go to Next Question\r\n                    </button>\r\n                </div>\r\n            )}\r\n            {submitMessage && <p>{submitMessage}</p>}\r\n            {score && <p>{score}</p>}\r\n            {!isVerified && <p style={{ color: \"red\" }}>Identity verification failed.</p>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InterviewPage;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}