{"ast":null,"code":"var _jsxFileName = \"D:\\\\SIH\\\\RecruitSmart\\\\RecruitSmart Frontend\\\\src\\\\components\\\\UserDashboard\\\\Simulation\\\\Interviewpage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useParams } from \"react-router-dom\"; // Import useParams\nimport axios from \"axios\";\nimport Webcam from \"react-webcam\";\nimport { loadModels, loadInitialImage, startWebcamProcessing } from './facerecognition';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction InterviewPage() {\n  _s();\n  const {\n    command_id\n  } = useParams(); // Get command_id from URL params\n  const [question, setQuestion] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [userAnswer, setUserAnswer] = useState(\"\");\n  const [submitMessage, setSubmitMessage] = useState(\"\");\n  const [currentQuestionId, setCurrentQuestionId] = useState(null);\n  const [answerTimer, setAnswerTimer] = useState(30); // 30 seconds for \"Answer the Question\"\n  const [submitTimer, setSubmitTimer] = useState(60); // 1 minute to submit after clicking \"Answer the Question\"\n  const [isAnswering, setIsAnswering] = useState(false);\n  const [score, setScore] = useState(0);\n  const webcamRef = useRef(null);\n  const [isModelLoaded, setIsModelLoaded] = useState(false);\n  const [initialDescriptor, setInitialDescriptor] = useState(null);\n  const videoRef = useRef(null); // Reference for the video element\n  const [message, setMessage] = useState(\"Loading...\");\n  const answerTimerRef = useRef(null);\n  const submitTimerRef = useRef(null);\n\n  // Fetch the first question or the next question\n  const fetchQuestion = async (id = null) => {\n    try {\n      setLoading(true);\n      setQuestion(null); // Clear the current question while fetching the new one\n      const url = id ? `http://127.0.0.1:8000/api/fetch-next-question/?current_question_id=${id}&command_id=${command_id}` : `http://127.0.0.1:8000/api/fetch-next-question/?&command_id=${command_id}`;\n      const response = await axios.get(url);\n      const data = response.data;\n      if (data.message === \"No more questions available.\") {\n        setQuestion(null);\n        setSubmitMessage(\"Interview completed! Thank you.\");\n        clearInterval(answerTimerRef.current);\n        clearInterval(submitTimerRef.current);\n      } else {\n        setQuestion(data);\n        setCurrentQuestionId(data.id);\n        resetTimers();\n        speakText(data.question);\n      }\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const initializeApp = async () => {\n    const modelsLoaded = await loadModels();\n    if (modelsLoaded) {\n      setIsModelLoaded(true);\n      const descriptor = await loadInitialImage(true); // Get descriptor of the initial image\n      setInitialDescriptor(descriptor); // Store descriptor\n    }\n  };\n  useEffect(() => {\n    fetchQuestion();\n\n    // Timer for answering the question\n    answerTimerRef.current = setInterval(() => {\n      setAnswerTimer(prev => {\n        if (prev <= 1) {\n          clearInterval(answerTimerRef.current);\n          handleSkipQuestion(); // Skip to next question if not answered within 30 seconds\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    return () => clearInterval(answerTimerRef.current);\n  }, []);\n\n  // Initialize face recognition workflow\n  useEffect(() => {\n    const initialize = async () => {\n      setMessage(\"Loading models...\");\n      const modelsLoaded = await loadModels();\n      setIsModelLoaded(modelsLoaded);\n      if (modelsLoaded) {\n        setMessage(\"Processing initial image...\");\n        const descriptor = await loadInitialImage(modelsLoaded);\n        if (descriptor) {\n          setInitialDescriptor(descriptor);\n          setMessage(\"Starting webcam...\");\n          if (videoRef.current) {\n            startWebcamProcessing(videoRef.current, descriptor, handleFaceMismatch);\n            setMessage(\"Webcam started. Monitoring face match...\");\n          }\n        } else {\n          setMessage(\"Failed to detect face in the initial image.\");\n        }\n      } else {\n        setMessage(\"Failed to load models.\");\n      }\n    };\n    initialize();\n  }, []);\n  const handleFaceMismatch = () => {\n    setMessage(\"Face mismatch detected! Please ensure only the authorized user is present.\");\n    // Stop webcam stream or perform other actions as needed\n    if (videoRef.current && videoRef.current.srcObject) {\n      const tracks = videoRef.current.srcObject.getTracks();\n      tracks.forEach(track => track.stop());\n    }\n  };\n  const resetTimers = () => {\n    if (answerTimerRef.current) clearInterval(answerTimerRef.current);\n    if (submitTimerRef.current) clearInterval(submitTimerRef.current);\n    setAnswerTimer(30);\n    setSubmitTimer(30);\n    setIsAnswering(false);\n\n    // Restart answer timer\n    answerTimerRef.current = setInterval(() => {\n      setAnswerTimer(prev => {\n        if (prev <= 1) {\n          clearInterval(answerTimerRef.current);\n          handleSkipQuestion(); // Skip question if timer runs out\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n  const startAnswering = () => {\n    setIsAnswering(true);\n    if (answerTimerRef.current) clearInterval(answerTimerRef.current);\n\n    // Start submit timer\n    submitTimerRef.current = setInterval(() => {\n      setSubmitTimer(prev => {\n        if (prev <= 1) {\n          clearInterval(submitTimerRef.current);\n          handleSkipQuestion(); // Skip question if not submitted within 1 minute\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n  const handleVoiceInput = () => {\n    const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n    recognition.lang = \"en-US\";\n    recognition.interimResults = false;\n    recognition.onresult = event => {\n      const transcript = event.results[0][0].transcript;\n      setUserAnswer(transcript);\n    };\n    recognition.onerror = event => {\n      console.error(\"Speech recognition error:\", event.error);\n    };\n    recognition.start();\n  };\n  const handleSubmit = async () => {\n    if (!userAnswer.trim()) {\n      alert(\"Please provide an answer before submitting.\");\n      return;\n    }\n    try {\n      const response = await axios.post(\"http://127.0.0.1:8000/api/submit-response/\", {\n        question_id: currentQuestionId,\n        user_answer: userAnswer\n      });\n      if (response.status === 200) {\n        const data = response.data;\n        setSubmitMessage(data.message || \"Answer submitted successfully!\");\n        setScore(data.score); // Set score from the response\n        setUserAnswer(\"\");\n        fetchQuestion(currentQuestionId); // Fetch the next question\n      } else {\n        setSubmitMessage(\"An error occurred. Please try again.\");\n      }\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error(\"Error submitting response:\", err); // Log the error for debugging\n      setSubmitMessage(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || \"A network error occurred. Please check your connection.\");\n    } finally {\n      if (submitTimerRef.current) clearInterval(submitTimerRef.current);\n    }\n  };\n  const speakText = text => {\n    const synth = window.speechSynthesis;\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.lang = \"en-US\";\n    utterance.rate = 1; // Adjust rate as needed\n    synth.speak(utterance);\n  };\n  const handleSkipQuestion = () => {\n    setUserAnswer(\"\");\n    setSubmitMessage(\"\");\n    setScore(0);\n    fetchQuestion(currentQuestionId); // Fetch the next question\n  };\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs < 10 ? \"0\" : \"\"}${secs}`;\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 247,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 248,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Interview Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: isAnswering ? `Submit Time Left: ${formatTime(submitTimer)}` : `Answer Time Left: ${formatTime(answerTimer)}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        marginBottom: \"20px\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Webcam, {\n        ref: webcamRef,\n        width: \"640\",\n        height: \"480\",\n        screenshotFormat: \"image/jpeg\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }, this), question && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: question.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Difficulty:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 24\n        }, this), \" \", question.difficulty]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 268,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Your Answer:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 270,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: userAnswer,\n          onChange: e => setUserAnswer(e.target.value),\n          rows: \"4\",\n          cols: \"50\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: userAnswer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 277,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startAnswering,\n        disabled: isAnswering,\n        children: \"Answer the Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleVoiceInput,\n        disabled: !isAnswering,\n        children: \"Use Voice Input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        disabled: !isAnswering,\n        children: \"Submit Answer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 285,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSkipQuestion,\n        children: \"Go to Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 266,\n      columnNumber: 17\n    }, this), submitMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: submitMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 31\n    }, this), score && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: score\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 251,\n    columnNumber: 9\n  }, this);\n}\n_s(InterviewPage, \"Jv2OAo7idkpmqluTd6CPvWteCtY=\", false, function () {\n  return [useParams];\n});\n_c = InterviewPage;\nexport default InterviewPage;\nvar _c;\n$RefreshReg$(_c, \"InterviewPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","axios","Webcam","loadModels","loadInitialImage","startWebcamProcessing","jsxDEV","_jsxDEV","InterviewPage","_s","command_id","question","setQuestion","loading","setLoading","error","setError","userAnswer","setUserAnswer","submitMessage","setSubmitMessage","currentQuestionId","setCurrentQuestionId","answerTimer","setAnswerTimer","submitTimer","setSubmitTimer","isAnswering","setIsAnswering","score","setScore","webcamRef","isModelLoaded","setIsModelLoaded","initialDescriptor","setInitialDescriptor","videoRef","message","setMessage","answerTimerRef","submitTimerRef","fetchQuestion","id","url","response","get","data","clearInterval","current","resetTimers","speakText","err","initializeApp","modelsLoaded","descriptor","setInterval","prev","handleSkipQuestion","initialize","handleFaceMismatch","srcObject","tracks","getTracks","forEach","track","stop","startAnswering","handleVoiceInput","recognition","window","SpeechRecognition","webkitSpeechRecognition","lang","interimResults","onresult","event","transcript","results","onerror","console","start","handleSubmit","trim","alert","post","question_id","user_answer","status","_err$response","_err$response$data","text","synth","speechSynthesis","utterance","SpeechSynthesisUtterance","rate","speak","formatTime","seconds","mins","Math","floor","secs","children","fileName","_jsxFileName","lineNumber","columnNumber","style","textAlign","padding","display","justifyContent","marginBottom","ref","width","height","screenshotFormat","difficulty","value","onChange","e","target","rows","cols","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/SIH/RecruitSmart/RecruitSmart Frontend/src/components/UserDashboard/Simulation/Interviewpage.jsx"],"sourcesContent":["\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { useParams } from \"react-router-dom\"; // Import useParams\r\nimport axios from \"axios\";\r\nimport Webcam from \"react-webcam\";\r\nimport { loadModels, loadInitialImage, startWebcamProcessing } from './facerecognition';\r\n\r\nfunction InterviewPage() {\r\n    const { command_id } = useParams(); // Get command_id from URL params\r\n    const [question, setQuestion] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [userAnswer, setUserAnswer] = useState(\"\");\r\n    const [submitMessage, setSubmitMessage] = useState(\"\");\r\n    const [currentQuestionId, setCurrentQuestionId] = useState(null);\r\n    const [answerTimer, setAnswerTimer] = useState(30); // 30 seconds for \"Answer the Question\"\r\n    const [submitTimer, setSubmitTimer] = useState(60); // 1 minute to submit after clicking \"Answer the Question\"\r\n    const [isAnswering, setIsAnswering] = useState(false);\r\n    const [score, setScore] = useState(0);\r\n    const webcamRef = useRef(null);\r\n\r\n\r\n    const [isModelLoaded, setIsModelLoaded] = useState(false);\r\n    const [initialDescriptor, setInitialDescriptor] = useState(null);\r\n    const videoRef = useRef(null); // Reference for the video element\r\n    const [message, setMessage] = useState(\"Loading...\"); \r\n  \r\n\r\n    const answerTimerRef = useRef(null);\r\n    const submitTimerRef = useRef(null);\r\n\r\n    // Fetch the first question or the next question\r\n    const fetchQuestion = async (id = null) => {\r\n      try {\r\n          setLoading(true);\r\n          setQuestion(null); // Clear the current question while fetching the new one\r\n          const url = id\r\n          ? `http://127.0.0.1:8000/api/fetch-next-question/?current_question_id=${id}&command_id=${command_id}`\r\n          : `http://127.0.0.1:8000/api/fetch-next-question/?&command_id=${command_id}`;\r\n          const response = await axios.get(url);\r\n          const data = response.data;\r\n  \r\n          if (data.message === \"No more questions available.\") {\r\n              setQuestion(null);\r\n              setSubmitMessage(\"Interview completed! Thank you.\");\r\n              clearInterval(answerTimerRef.current);\r\n              clearInterval(submitTimerRef.current);\r\n          } else {\r\n              setQuestion(data);\r\n              setCurrentQuestionId(data.id);\r\n              resetTimers();\r\n              speakText(data.question);\r\n          }\r\n      } catch (err) {\r\n          setError(err.message);\r\n      } finally {\r\n          setLoading(false);\r\n      }\r\n  };\r\n\r\n\r\n  const initializeApp = async () => {\r\n    const modelsLoaded = await loadModels();\r\n    if (modelsLoaded) {\r\n        setIsModelLoaded(true);\r\n        const descriptor = await loadInitialImage(true); // Get descriptor of the initial image\r\n        setInitialDescriptor(descriptor); // Store descriptor\r\n    }\r\n};\r\n\r\n\r\n    useEffect(() => {\r\n\r\n\r\n        fetchQuestion();\r\n\r\n        // Timer for answering the question\r\n        answerTimerRef.current = setInterval(() => {\r\n            setAnswerTimer((prev) => {\r\n                if (prev <= 1) {\r\n                    clearInterval(answerTimerRef.current);\r\n                    handleSkipQuestion(); // Skip to next question if not answered within 30 seconds\r\n                    return 0;\r\n                }\r\n                return prev - 1;\r\n            });\r\n        }, 1000);\r\n\r\n        return () => clearInterval(answerTimerRef.current);\r\n    }, []);\r\n\r\n\r\n// Initialize face recognition workflow\r\nuseEffect(() => {\r\n    const initialize = async () => {\r\n        setMessage(\"Loading models...\");\r\n        const modelsLoaded = await loadModels();\r\n        setIsModelLoaded(modelsLoaded);\r\n\r\n        if (modelsLoaded) {\r\n            setMessage(\"Processing initial image...\");\r\n            const descriptor = await loadInitialImage(modelsLoaded);\r\n            if (descriptor) {\r\n                setInitialDescriptor(descriptor);\r\n                setMessage(\"Starting webcam...\");\r\n                if (videoRef.current) {\r\n                    startWebcamProcessing(videoRef.current, descriptor, handleFaceMismatch);\r\n                    setMessage(\"Webcam started. Monitoring face match...\");\r\n                }\r\n            } else {\r\n                setMessage(\"Failed to detect face in the initial image.\");\r\n            }\r\n        } else {\r\n            setMessage(\"Failed to load models.\");\r\n        }\r\n    };\r\n\r\n    initialize();\r\n}, []);\r\n\r\n    const handleFaceMismatch = () => {\r\n        setMessage(\"Face mismatch detected! Please ensure only the authorized user is present.\");\r\n        // Stop webcam stream or perform other actions as needed\r\n        if (videoRef.current && videoRef.current.srcObject) {\r\n            const tracks = videoRef.current.srcObject.getTracks();\r\n            tracks.forEach((track) => track.stop());\r\n        }\r\n    };\r\n\r\n    const resetTimers = () => {\r\n      if (answerTimerRef.current) clearInterval(answerTimerRef.current);\r\n      if (submitTimerRef.current) clearInterval(submitTimerRef.current);\r\n  \r\n      setAnswerTimer(30);\r\n      setSubmitTimer(30);\r\n      setIsAnswering(false);\r\n  \r\n      // Restart answer timer\r\n      answerTimerRef.current = setInterval(() => {\r\n          setAnswerTimer((prev) => {\r\n              if (prev <= 1) {\r\n                  clearInterval(answerTimerRef.current);\r\n                  handleSkipQuestion(); // Skip question if timer runs out\r\n                  return 0;\r\n              }\r\n              return prev - 1;\r\n          });\r\n      }, 1000);\r\n  };\r\n  \r\n\r\n    const startAnswering = () => {\r\n        setIsAnswering(true);\r\n        if (answerTimerRef.current) clearInterval(answerTimerRef.current);\r\n\r\n        // Start submit timer\r\n        submitTimerRef.current = setInterval(() => {\r\n            setSubmitTimer((prev) => {\r\n                if (prev <= 1) {\r\n                    clearInterval(submitTimerRef.current);\r\n                    handleSkipQuestion(); // Skip question if not submitted within 1 minute\r\n                    return 0;\r\n                }\r\n                return prev - 1;\r\n            });\r\n        }, 1000);\r\n    };\r\n\r\n    const handleVoiceInput = () => {\r\n        const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\r\n        recognition.lang = \"en-US\";\r\n        recognition.interimResults = false;\r\n\r\n        recognition.onresult = (event) => {\r\n            const transcript = event.results[0][0].transcript;\r\n            setUserAnswer(transcript);\r\n        };\r\n\r\n        recognition.onerror = (event) => {\r\n            console.error(\"Speech recognition error:\", event.error);\r\n        };\r\n\r\n        recognition.start();\r\n    };\r\n\r\n\r\nconst handleSubmit = async () => {\r\n    if (!userAnswer.trim()) {\r\n        alert(\"Please provide an answer before submitting.\");\r\n        return;\r\n    }\r\n\r\n    try {\r\n        const response = await axios.post(\r\n            \"http://127.0.0.1:8000/api/submit-response/\",\r\n            {\r\n                question_id: currentQuestionId,\r\n                user_answer: userAnswer,\r\n            }\r\n        );\r\n\r\n        if (response.status === 200) {\r\n            const data = response.data;\r\n            setSubmitMessage(data.message || \"Answer submitted successfully!\");\r\n            setScore(data.score); // Set score from the response\r\n            setUserAnswer(\"\");\r\n            fetchQuestion(currentQuestionId); // Fetch the next question\r\n        } else {\r\n            setSubmitMessage(\"An error occurred. Please try again.\");\r\n        }\r\n    } catch (err) {\r\n        console.error(\"Error submitting response:\", err); // Log the error for debugging\r\n        setSubmitMessage(\r\n            err.response?.data?.error || \"A network error occurred. Please check your connection.\"\r\n        );\r\n    } finally {\r\n        if (submitTimerRef.current) clearInterval(submitTimerRef.current);\r\n    }\r\n};\r\n\r\n\r\n\r\n\r\nconst speakText = (text) => {\r\n    const synth = window.speechSynthesis;\r\n    const utterance = new SpeechSynthesisUtterance(text);\r\n    utterance.lang = \"en-US\";\r\n    utterance.rate = 1; // Adjust rate as needed\r\n    synth.speak(utterance);\r\n};\r\n  \r\n  \r\n  const handleSkipQuestion = () => {\r\n      setUserAnswer(\"\");\r\n      setSubmitMessage(\"\");\r\n      setScore(0);\r\n      fetchQuestion(currentQuestionId); // Fetch the next question\r\n  };\r\n  \r\n\r\n    const formatTime = (seconds) => {\r\n        const mins = Math.floor(seconds / 60);\r\n        const secs = seconds % 60;\r\n        return `${mins}:${secs < 10 ? \"0\" : \"\"}${secs}`;\r\n    };\r\n\r\n    if (loading) return <h1>Loading...</h1>;\r\n    if (error) return <h1>Error: {error}</h1>;\r\n\r\n    return (\r\n        <div style={{ textAlign: \"center\", padding: \"20px\" }}>\r\n            <h1>Interview Question</h1>\r\n            <h2>{isAnswering ? `Submit Time Left: ${formatTime(submitTimer)}` : `Answer Time Left: ${formatTime(answerTimer)}`}</h2>\r\n            \r\n            <div style={{ display: \"flex\", justifyContent: \"center\", marginBottom: \"20px\" }}>\r\n                <Webcam\r\n                    ref={webcamRef}\r\n                    width=\"640\"\r\n                    height=\"480\"\r\n                    screenshotFormat=\"image/jpeg\"\r\n                />\r\n\r\n            </div>\r\n\r\n            {question && (\r\n                <div>\r\n                    <h2>{question.question}</h2>\r\n                    <p><strong>Difficulty:</strong> {question.difficulty}</p>\r\n                    <div>\r\n                        <h3>Your Answer:</h3>\r\n                        <textarea\r\n                            value={userAnswer}\r\n                            onChange={(e) => setUserAnswer(e.target.value)}\r\n                            rows=\"4\"\r\n                            cols=\"50\"\r\n                        />\r\n                        <p>{userAnswer}</p>\r\n                    </div>\r\n                    <button onClick={startAnswering} disabled={isAnswering}>\r\n                        Answer the Question\r\n                    </button>\r\n                    <button onClick={handleVoiceInput} disabled={!isAnswering}>\r\n                        Use Voice Input\r\n                    </button>\r\n                    <button onClick={handleSubmit} disabled={!isAnswering}>\r\n                        Submit Answer\r\n                    </button>\r\n                    <button onClick={handleSkipQuestion}>\r\n                        Go to Next Question\r\n                    </button>\r\n                </div>\r\n            )}\r\n            {submitMessage && <p>{submitMessage}</p>}\r\n            {score && <p>{score}</p>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InterviewPage;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}