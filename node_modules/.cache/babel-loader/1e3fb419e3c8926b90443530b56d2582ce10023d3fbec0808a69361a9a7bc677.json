{"ast":null,"code":"var _jsxFileName = \"D:\\\\SIH\\\\RecruitSmart\\\\RecruitSmart Frontend\\\\src\\\\components\\\\UserDashboard\\\\Simulation\\\\Interviewpage.jsx\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect, useRef } from \"react\";\n// import axios from \"axios\";\n// import Webcam from \"react-webcam\";\n\n// function InterviewPage() {\n//     const [question, setQuestion] = useState(null);\n//     const [loading, setLoading] = useState(true);\n//     const [error, setError] = useState(null);\n//     const [userAnswer, setUserAnswer] = useState(\"\");\n//     const [submitMessage, setSubmitMessage] = useState(\"\");\n//     const [currentQuestionId, setCurrentQuestionId] = useState(null);\n//     const [answerTimer, setAnswerTimer] = useState(30); // 30 seconds for \"Answer the Question\"\n//     const [submitTimer, setSubmitTimer] = useState(60); // 1 minute to submit after clicking \"Answer the Question\"\n//     const [isAnswering, setIsAnswering] = useState(false);\n//     const [score, setScore] = useState(0);\n//     const webcamRef = useRef(null);\n\n//     const answerTimerRef = useRef(null);\n//     const submitTimerRef = useRef(null);\n\n//     // Fetch the first question or the next question\n//     const fetchQuestion = async (id = null) => {\n//       try {\n//           setLoading(true);\n//           setQuestion(null); // Clear the current question while fetching the new one\n//           const url = id\n//               ? `http://127.0.0.1:8000/api/fetch-next-question/?current_question_id=${id}`\n//               : \"http://127.0.0.1:8000/api/fetch-next-question/\";\n//           const response = await axios.get(url);\n//           const data = response.data;\n\n//           if (data.message === \"No more questions available.\") {\n//               setQuestion(null);\n//               setSubmitMessage(\"Interview completed! Thank you.\");\n//               clearInterval(answerTimerRef.current);\n//               clearInterval(submitTimerRef.current);\n//           } else {\n//               setQuestion(data);\n//               setCurrentQuestionId(data.id);\n//               resetTimers();\n//               speakText(data.question);\n//           }\n//       } catch (err) {\n//           setError(err.message);\n//       } finally {\n//           setLoading(false);\n//       }\n//   };\n\n//     useEffect(() => {\n//         fetchQuestion();\n\n//         // Timer for answering the question\n//         answerTimerRef.current = setInterval(() => {\n//             setAnswerTimer((prev) => {\n//                 if (prev <= 1) {\n//                     clearInterval(answerTimerRef.current);\n//                     handleSkipQuestion(); // Skip to next question if not answered within 30 seconds\n//                     return 0;\n//                 }\n//                 return prev - 1;\n//             });\n//         }, 1000);\n\n//         return () => clearInterval(answerTimerRef.current);\n//     }, []);\n\n//     const resetTimers = () => {\n//       if (answerTimerRef.current) clearInterval(answerTimerRef.current);\n//       if (submitTimerRef.current) clearInterval(submitTimerRef.current);\n\n//       setAnswerTimer(30);\n//       setSubmitTimer(30);\n//       setIsAnswering(false);\n\n//       // Restart answer timer\n//       answerTimerRef.current = setInterval(() => {\n//           setAnswerTimer((prev) => {\n//               if (prev <= 1) {\n//                   clearInterval(answerTimerRef.current);\n//                   handleSkipQuestion(); // Skip question if timer runs out\n//                   return 0;\n//               }\n//               return prev - 1;\n//           });\n//       }, 1000);\n//   };\n\n//     const startAnswering = () => {\n//         setIsAnswering(true);\n//         if (answerTimerRef.current) clearInterval(answerTimerRef.current);\n\n//         // Start submit timer\n//         submitTimerRef.current = setInterval(() => {\n//             setSubmitTimer((prev) => {\n//                 if (prev <= 1) {\n//                     clearInterval(submitTimerRef.current);\n//                     handleSkipQuestion(); // Skip question if not submitted within 1 minute\n//                     return 0;\n//                 }\n//                 return prev - 1;\n//             });\n//         }, 1000);\n//     };\n\n//     const handleVoiceInput = () => {\n//         const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n//         recognition.lang = \"en-US\";\n//         recognition.interimResults = false;\n\n//         recognition.onresult = (event) => {\n//             const transcript = event.results[0][0].transcript;\n//             setUserAnswer(transcript);\n//         };\n\n//         recognition.onerror = (event) => {\n//             console.error(\"Speech recognition error:\", event.error);\n//         };\n\n//         recognition.start();\n//     };\n\n// const handleSubmit = async () => {\n//     if (!userAnswer.trim()) {\n//         alert(\"Please provide an answer before submitting.\");\n//         return;\n//     }\n\n//     try {\n//         const response = await axios.post(\n//             \"http://127.0.0.1:8000/api/submit-response/\",\n//             {\n//                 question_id: currentQuestionId,\n//                 user_answer: userAnswer,\n//             }\n//         );\n\n//         if (response.status === 200) {\n//             const data = response.data;\n//             setSubmitMessage(data.message || \"Answer submitted successfully!\");\n//             setScore(data.score); // Set score from the response\n//             setUserAnswer(\"\");\n//             fetchQuestion(currentQuestionId); // Fetch the next question\n//         } else {\n//             setSubmitMessage(\"An error occurred. Please try again.\");\n//         }\n//     } catch (err) {\n//         console.error(\"Error submitting response:\", err); // Log the error for debugging\n//         setSubmitMessage(\n//             err.response?.data?.error || \"A network error occurred. Please check your connection.\"\n//         );\n//     } finally {\n//         if (submitTimerRef.current) clearInterval(submitTimerRef.current);\n//     }\n// };\n\n// const speakText = (text) => {\n//     const synth = window.speechSynthesis;\n//     const utterance = new SpeechSynthesisUtterance(text);\n//     utterance.lang = \"en-US\";\n//     utterance.rate = 1; // Adjust rate as needed\n//     synth.speak(utterance);\n// };\n\n//   const handleSkipQuestion = () => {\n//       setUserAnswer(\"\");\n//       setSubmitMessage(\"\");\n//       setScore(0);\n//       fetchQuestion(currentQuestionId); // Fetch the next question\n//   };\n\n//     const formatTime = (seconds) => {\n//         const mins = Math.floor(seconds / 60);\n//         const secs = seconds % 60;\n//         return `${mins}:${secs < 10 ? \"0\" : \"\"}${secs}`;\n//     };\n\n//     if (loading) return <h1>Loading...</h1>;\n//     if (error) return <h1>Error: {error}</h1>;\n\n//     return (\n//         <div style={{ textAlign: \"center\", padding: \"20px\" }}>\n//             <h1>Interview Question</h1>\n//             <h2>{isAnswering ? `Submit Time Left: ${formatTime(submitTimer)}` : `Answer Time Left: ${formatTime(answerTimer)}`}</h2>\n\n//             <div style={{ display: \"flex\", justifyContent: \"center\", marginBottom: \"20px\" }}>\n//                 <Webcam\n//                     audio={false}\n//                     ref={webcamRef}\n//                     screenshotFormat=\"image/jpeg\"\n//                     videoConstraints={{\n//                         width: 1280,\n//                         height: 720,\n//                         facingMode: \"user\",\n//                     }}\n//                     style={{\n//                         width: \"300px\",\n//                         border: \"2px solid black\",\n//                         borderRadius: \"10px\",\n//                         marginRight: \"10px\",\n//                     }}\n//                 />\n//             </div>\n\n//             {question && (\n//                 <div>\n//                     <h2>{question.question}</h2>\n//                     <p><strong>Difficulty:</strong> {question.difficulty}</p>\n//                     <div>\n//                         <h3>Your Answer:</h3>\n//                         <textarea\n//                             value={userAnswer}\n//                             onChange={(e) => setUserAnswer(e.target.value)}\n//                             rows=\"4\"\n//                             cols=\"50\"\n//                         />\n//                         <p>{userAnswer}</p>\n//                     </div>\n//                     <button onClick={startAnswering} disabled={isAnswering}>\n//                         Answer the Question\n//                     </button>\n//                     <button onClick={handleVoiceInput} disabled={!isAnswering}>\n//                         Use Voice Input\n//                     </button>\n//                     <button onClick={handleSubmit} disabled={!isAnswering}>\n//                         Submit Answer\n//                     </button>\n//                     <button onClick={handleSkipQuestion}>\n//                         Go to Next Question\n//                     </button>\n//                 </div>\n//             )}\n//             {submitMessage && <p>{submitMessage}</p>}\n//             {score && <p>{score}</p>}\n//         </div>\n//     );\n// }\n\n// export default InterviewPage;\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport axios from \"axios\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction InterviewPage() {\n  _s();\n  const [question, setQuestion] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [userAnswer, setUserAnswer] = useState(\"\");\n  const [submitMessage, setSubmitMessage] = useState(\"\");\n  const [currentQuestionId, setCurrentQuestionId] = useState(null);\n  const [answerTimer, setAnswerTimer] = useState(30); // 30 seconds for answering\n  const [submitTimer, setSubmitTimer] = useState(60); // 1 minute to submit\n  const [isAnswering, setIsAnswering] = useState(false);\n  const [score, setScore] = useState(0);\n  const answerTimerRef = useRef(null);\n  const submitTimerRef = useRef(null);\n  const navigate = useNavigate();\n\n  // Fullscreen and Escape Key Handling\n  useEffect(() => {\n    const enableFullScreen = () => {\n      const elem = document.documentElement;\n      if (elem.requestFullscreen) {\n        elem.requestFullscreen().catch(err => {\n          console.error(\"Fullscreen permission error:\", err);\n        });\n      } else {\n        console.error(\"Fullscreen API not supported.\");\n      }\n    };\n    const handleEscapeKey = event => {\n      if (event.key === \"Escape\" || event.keyCode === 27) {\n        console.log(\"Escape key pressed, redirecting to feedback page...\");\n        navigate(\"/feedback\");\n      }\n    };\n\n    // Activate fullscreen and set up keydown listener\n    enableFullScreen();\n    window.addEventListener(\"keydown\", handleEscapeKey);\n\n    // Cleanup on unmount\n    return () => {\n      window.removeEventListener(\"keydown\", handleEscapeKey);\n    };\n  }, [navigate]);\n\n  // Fetch the next question\n  const fetchQuestion = async (id = null) => {\n    try {\n      setLoading(true);\n      setQuestion(null);\n      const url = id ? `http://127.0.0.1:8000/api/fetch-next-question/?current_question_id=${id}` : \"http://127.0.0.1:8000/api/fetch-next-question/\";\n      const response = await axios.get(url);\n      const data = response.data;\n      if (data.message === \"No more questions available.\") {\n        setQuestion(null);\n        setSubmitMessage(\"Interview completed! Thank you.\");\n        clearInterval(answerTimerRef.current);\n        clearInterval(submitTimerRef.current);\n        navigate(\"/feedback\");\n      } else {\n        setQuestion(data);\n        setCurrentQuestionId(data.id);\n        resetTimers();\n      }\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch question on mount and cleanup timers\n  useEffect(() => {\n    fetchQuestion();\n    return () => {\n      clearInterval(answerTimerRef.current);\n      clearInterval(submitTimerRef.current);\n    };\n  }, []);\n\n  // Reset timers for answering and submission\n  const resetTimers = () => {\n    if (answerTimerRef.current) clearInterval(answerTimerRef.current);\n    if (submitTimerRef.current) clearInterval(submitTimerRef.current);\n    setAnswerTimer(30);\n    setSubmitTimer(60);\n    setIsAnswering(false);\n    answerTimerRef.current = setInterval(() => {\n      setAnswerTimer(prev => {\n        if (prev <= 1) {\n          clearInterval(answerTimerRef.current);\n          handleSkipQuestion();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n  const startAnswering = () => {\n    setIsAnswering(true);\n    if (answerTimerRef.current) clearInterval(answerTimerRef.current);\n    submitTimerRef.current = setInterval(() => {\n      setSubmitTimer(prev => {\n        if (prev <= 1) {\n          clearInterval(submitTimerRef.current);\n          handleSkipQuestion();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n\n  // Handle voice input\n  const handleVoiceInput = () => {\n    if (!(\"SpeechRecognition\" in window || \"webkitSpeechRecognition\" in window)) {\n      alert(\"Your browser does not support voice input.\");\n      return;\n    }\n    const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n    recognition.lang = \"en-US\";\n    recognition.interimResults = false;\n    recognition.onresult = event => {\n      const transcript = event.results[0][0].transcript;\n      setUserAnswer(transcript);\n    };\n    recognition.onerror = event => {\n      console.error(\"Speech recognition error:\", event.error);\n    };\n    recognition.start();\n  };\n\n  // Submit answer\n  const handleSubmit = async () => {\n    if (!userAnswer.trim()) {\n      alert(\"Please provide an answer before submitting.\");\n      return;\n    }\n    try {\n      const response = await axios.post(\"http://127.0.0.1:8000/api/submit-response/\", {\n        question_id: currentQuestionId,\n        user_answer: userAnswer\n      });\n      if (response.status === 200) {\n        const data = response.data;\n        setSubmitMessage(data.message || \"Answer submitted successfully!\");\n        setScore(data.score);\n        setUserAnswer(\"\");\n        fetchQuestion(currentQuestionId);\n      } else {\n        setSubmitMessage(\"An error occurred. Please try again.\");\n      }\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error(\"Error submitting response:\", err);\n      setSubmitMessage(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || \"A network error occurred. Please check your connection.\");\n    } finally {\n      if (submitTimerRef.current) clearInterval(submitTimerRef.current);\n    }\n  };\n  const handleSkipQuestion = () => {\n    setUserAnswer(\"\");\n    setSubmitMessage(\"\");\n    fetchQuestion(currentQuestionId);\n  };\n  const formatTime = seconds => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs < 10 ? \"0\" : \"\"}${secs}`;\n  };\n  if (loading) return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 449,\n    columnNumber: 25\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 450,\n    columnNumber: 23\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      padding: \"20px\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Interview Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: isAnswering ? `Submit Time Left: ${formatTime(submitTimer)}` : `Answer Time Left: ${formatTime(answerTimer)}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 455,\n      columnNumber: 13\n    }, this), question ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: question.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Difficulty:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 465,\n          columnNumber: 25\n        }, this), \" \", question.difficulty]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 464,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Your Answer:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 468,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: userAnswer,\n          onChange: e => setUserAnswer(e.target.value),\n          rows: \"4\",\n          cols: \"50\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 469,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 467,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: startAnswering,\n        disabled: isAnswering,\n        children: \"Answer the Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 476,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleVoiceInput,\n        disabled: !isAnswering,\n        children: \"Use Voice Input\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 479,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSubmit,\n        disabled: !isAnswering,\n        children: \"Submit Answer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 482,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSkipQuestion,\n        children: \"Go to Next Question\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 462,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: submitMessage || \"No question available at the moment.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 17\n    }, this), submitMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: submitMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 31\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: \"Score:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 17\n      }, this), \" \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 493,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 453,\n    columnNumber: 9\n  }, this);\n}\n_s(InterviewPage, \"i+ygoGtG2i5pBNr3gU6PWxJkxX0=\", false, function () {\n  return [useNavigate];\n});\n_c = InterviewPage;\nexport default InterviewPage;\nvar _c;\n$RefreshReg$(_c, \"InterviewPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","axios","useNavigate","jsxDEV","_jsxDEV","InterviewPage","_s","question","setQuestion","loading","setLoading","error","setError","userAnswer","setUserAnswer","submitMessage","setSubmitMessage","currentQuestionId","setCurrentQuestionId","answerTimer","setAnswerTimer","submitTimer","setSubmitTimer","isAnswering","setIsAnswering","score","setScore","answerTimerRef","submitTimerRef","navigate","enableFullScreen","elem","document","documentElement","requestFullscreen","catch","err","console","handleEscapeKey","event","key","keyCode","log","window","addEventListener","removeEventListener","fetchQuestion","id","url","response","get","data","message","clearInterval","current","resetTimers","setInterval","prev","handleSkipQuestion","startAnswering","handleVoiceInput","alert","recognition","SpeechRecognition","webkitSpeechRecognition","lang","interimResults","onresult","transcript","results","onerror","start","handleSubmit","trim","post","question_id","user_answer","status","_err$response","_err$response$data","formatTime","seconds","mins","Math","floor","secs","children","fileName","_jsxFileName","lineNumber","columnNumber","style","textAlign","padding","difficulty","value","onChange","e","target","rows","cols","onClick","disabled","_c","$RefreshReg$"],"sources":["D:/SIH/RecruitSmart/RecruitSmart Frontend/src/components/UserDashboard/Simulation/Interviewpage.jsx"],"sourcesContent":["\r\n// import React, { useState, useEffect, useRef } from \"react\";\r\n// import axios from \"axios\";\r\n// import Webcam from \"react-webcam\";\r\n\r\n// function InterviewPage() {\r\n//     const [question, setQuestion] = useState(null);\r\n//     const [loading, setLoading] = useState(true);\r\n//     const [error, setError] = useState(null);\r\n//     const [userAnswer, setUserAnswer] = useState(\"\");\r\n//     const [submitMessage, setSubmitMessage] = useState(\"\");\r\n//     const [currentQuestionId, setCurrentQuestionId] = useState(null);\r\n//     const [answerTimer, setAnswerTimer] = useState(30); // 30 seconds for \"Answer the Question\"\r\n//     const [submitTimer, setSubmitTimer] = useState(60); // 1 minute to submit after clicking \"Answer the Question\"\r\n//     const [isAnswering, setIsAnswering] = useState(false);\r\n//     const [score, setScore] = useState(0);\r\n//     const webcamRef = useRef(null);\r\n\r\n//     const answerTimerRef = useRef(null);\r\n//     const submitTimerRef = useRef(null);\r\n\r\n//     // Fetch the first question or the next question\r\n//     const fetchQuestion = async (id = null) => {\r\n//       try {\r\n//           setLoading(true);\r\n//           setQuestion(null); // Clear the current question while fetching the new one\r\n//           const url = id\r\n//               ? `http://127.0.0.1:8000/api/fetch-next-question/?current_question_id=${id}`\r\n//               : \"http://127.0.0.1:8000/api/fetch-next-question/\";\r\n//           const response = await axios.get(url);\r\n//           const data = response.data;\r\n  \r\n//           if (data.message === \"No more questions available.\") {\r\n//               setQuestion(null);\r\n//               setSubmitMessage(\"Interview completed! Thank you.\");\r\n//               clearInterval(answerTimerRef.current);\r\n//               clearInterval(submitTimerRef.current);\r\n//           } else {\r\n//               setQuestion(data);\r\n//               setCurrentQuestionId(data.id);\r\n//               resetTimers();\r\n//               speakText(data.question);\r\n//           }\r\n//       } catch (err) {\r\n//           setError(err.message);\r\n//       } finally {\r\n//           setLoading(false);\r\n//       }\r\n//   };\r\n  \r\n\r\n//     useEffect(() => {\r\n//         fetchQuestion();\r\n\r\n//         // Timer for answering the question\r\n//         answerTimerRef.current = setInterval(() => {\r\n//             setAnswerTimer((prev) => {\r\n//                 if (prev <= 1) {\r\n//                     clearInterval(answerTimerRef.current);\r\n//                     handleSkipQuestion(); // Skip to next question if not answered within 30 seconds\r\n//                     return 0;\r\n//                 }\r\n//                 return prev - 1;\r\n//             });\r\n//         }, 1000);\r\n\r\n//         return () => clearInterval(answerTimerRef.current);\r\n//     }, []);\r\n\r\n//     const resetTimers = () => {\r\n//       if (answerTimerRef.current) clearInterval(answerTimerRef.current);\r\n//       if (submitTimerRef.current) clearInterval(submitTimerRef.current);\r\n  \r\n//       setAnswerTimer(30);\r\n//       setSubmitTimer(30);\r\n//       setIsAnswering(false);\r\n  \r\n//       // Restart answer timer\r\n//       answerTimerRef.current = setInterval(() => {\r\n//           setAnswerTimer((prev) => {\r\n//               if (prev <= 1) {\r\n//                   clearInterval(answerTimerRef.current);\r\n//                   handleSkipQuestion(); // Skip question if timer runs out\r\n//                   return 0;\r\n//               }\r\n//               return prev - 1;\r\n//           });\r\n//       }, 1000);\r\n//   };\r\n  \r\n\r\n//     const startAnswering = () => {\r\n//         setIsAnswering(true);\r\n//         if (answerTimerRef.current) clearInterval(answerTimerRef.current);\r\n\r\n//         // Start submit timer\r\n//         submitTimerRef.current = setInterval(() => {\r\n//             setSubmitTimer((prev) => {\r\n//                 if (prev <= 1) {\r\n//                     clearInterval(submitTimerRef.current);\r\n//                     handleSkipQuestion(); // Skip question if not submitted within 1 minute\r\n//                     return 0;\r\n//                 }\r\n//                 return prev - 1;\r\n//             });\r\n//         }, 1000);\r\n//     };\r\n\r\n//     const handleVoiceInput = () => {\r\n//         const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\r\n//         recognition.lang = \"en-US\";\r\n//         recognition.interimResults = false;\r\n\r\n//         recognition.onresult = (event) => {\r\n//             const transcript = event.results[0][0].transcript;\r\n//             setUserAnswer(transcript);\r\n//         };\r\n\r\n//         recognition.onerror = (event) => {\r\n//             console.error(\"Speech recognition error:\", event.error);\r\n//         };\r\n\r\n//         recognition.start();\r\n//     };\r\n\r\n\r\n// const handleSubmit = async () => {\r\n//     if (!userAnswer.trim()) {\r\n//         alert(\"Please provide an answer before submitting.\");\r\n//         return;\r\n//     }\r\n\r\n//     try {\r\n//         const response = await axios.post(\r\n//             \"http://127.0.0.1:8000/api/submit-response/\",\r\n//             {\r\n//                 question_id: currentQuestionId,\r\n//                 user_answer: userAnswer,\r\n//             }\r\n//         );\r\n\r\n//         if (response.status === 200) {\r\n//             const data = response.data;\r\n//             setSubmitMessage(data.message || \"Answer submitted successfully!\");\r\n//             setScore(data.score); // Set score from the response\r\n//             setUserAnswer(\"\");\r\n//             fetchQuestion(currentQuestionId); // Fetch the next question\r\n//         } else {\r\n//             setSubmitMessage(\"An error occurred. Please try again.\");\r\n//         }\r\n//     } catch (err) {\r\n//         console.error(\"Error submitting response:\", err); // Log the error for debugging\r\n//         setSubmitMessage(\r\n//             err.response?.data?.error || \"A network error occurred. Please check your connection.\"\r\n//         );\r\n//     } finally {\r\n//         if (submitTimerRef.current) clearInterval(submitTimerRef.current);\r\n//     }\r\n// };\r\n\r\n// const speakText = (text) => {\r\n//     const synth = window.speechSynthesis;\r\n//     const utterance = new SpeechSynthesisUtterance(text);\r\n//     utterance.lang = \"en-US\";\r\n//     utterance.rate = 1; // Adjust rate as needed\r\n//     synth.speak(utterance);\r\n// };\r\n  \r\n  \r\n//   const handleSkipQuestion = () => {\r\n//       setUserAnswer(\"\");\r\n//       setSubmitMessage(\"\");\r\n//       setScore(0);\r\n//       fetchQuestion(currentQuestionId); // Fetch the next question\r\n//   };\r\n  \r\n\r\n//     const formatTime = (seconds) => {\r\n//         const mins = Math.floor(seconds / 60);\r\n//         const secs = seconds % 60;\r\n//         return `${mins}:${secs < 10 ? \"0\" : \"\"}${secs}`;\r\n//     };\r\n\r\n//     if (loading) return <h1>Loading...</h1>;\r\n//     if (error) return <h1>Error: {error}</h1>;\r\n\r\n//     return (\r\n//         <div style={{ textAlign: \"center\", padding: \"20px\" }}>\r\n//             <h1>Interview Question</h1>\r\n//             <h2>{isAnswering ? `Submit Time Left: ${formatTime(submitTimer)}` : `Answer Time Left: ${formatTime(answerTimer)}`}</h2>\r\n            \r\n//             <div style={{ display: \"flex\", justifyContent: \"center\", marginBottom: \"20px\" }}>\r\n//                 <Webcam\r\n//                     audio={false}\r\n//                     ref={webcamRef}\r\n//                     screenshotFormat=\"image/jpeg\"\r\n//                     videoConstraints={{\r\n//                         width: 1280,\r\n//                         height: 720,\r\n//                         facingMode: \"user\",\r\n//                     }}\r\n//                     style={{\r\n//                         width: \"300px\",\r\n//                         border: \"2px solid black\",\r\n//                         borderRadius: \"10px\",\r\n//                         marginRight: \"10px\",\r\n//                     }}\r\n//                 />\r\n//             </div>\r\n\r\n//             {question && (\r\n//                 <div>\r\n//                     <h2>{question.question}</h2>\r\n//                     <p><strong>Difficulty:</strong> {question.difficulty}</p>\r\n//                     <div>\r\n//                         <h3>Your Answer:</h3>\r\n//                         <textarea\r\n//                             value={userAnswer}\r\n//                             onChange={(e) => setUserAnswer(e.target.value)}\r\n//                             rows=\"4\"\r\n//                             cols=\"50\"\r\n//                         />\r\n//                         <p>{userAnswer}</p>\r\n//                     </div>\r\n//                     <button onClick={startAnswering} disabled={isAnswering}>\r\n//                         Answer the Question\r\n//                     </button>\r\n//                     <button onClick={handleVoiceInput} disabled={!isAnswering}>\r\n//                         Use Voice Input\r\n//                     </button>\r\n//                     <button onClick={handleSubmit} disabled={!isAnswering}>\r\n//                         Submit Answer\r\n//                     </button>\r\n//                     <button onClick={handleSkipQuestion}>\r\n//                         Go to Next Question\r\n//                     </button>\r\n//                 </div>\r\n//             )}\r\n//             {submitMessage && <p>{submitMessage}</p>}\r\n//             {score && <p>{score}</p>}\r\n//         </div>\r\n//     );\r\n// }\r\n\r\n// export default InterviewPage;\r\n\r\n\r\n\r\n\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nfunction InterviewPage() {\r\n    const [question, setQuestion] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [userAnswer, setUserAnswer] = useState(\"\");\r\n    const [submitMessage, setSubmitMessage] = useState(\"\");\r\n    const [currentQuestionId, setCurrentQuestionId] = useState(null);\r\n    const [answerTimer, setAnswerTimer] = useState(30); // 30 seconds for answering\r\n    const [submitTimer, setSubmitTimer] = useState(60); // 1 minute to submit\r\n    const [isAnswering, setIsAnswering] = useState(false);\r\n    const [score, setScore] = useState(0);\r\n\r\n    const answerTimerRef = useRef(null);\r\n    const submitTimerRef = useRef(null);\r\n\r\n    const navigate = useNavigate();\r\n\r\n    // Fullscreen and Escape Key Handling\r\n    useEffect(() => {\r\n        const enableFullScreen = () => {\r\n            const elem = document.documentElement;\r\n            if (elem.requestFullscreen) {\r\n                elem.requestFullscreen().catch((err) => {\r\n                    console.error(\"Fullscreen permission error:\", err);\r\n                });\r\n            } else {\r\n                console.error(\"Fullscreen API not supported.\");\r\n            }\r\n        };\r\n\r\n        const handleEscapeKey = (event) => {\r\n            if (event.key === \"Escape\" || event.keyCode === 27) {\r\n                console.log(\"Escape key pressed, redirecting to feedback page...\");\r\n                navigate(\"/feedback\");\r\n            }\r\n        };\r\n\r\n        // Activate fullscreen and set up keydown listener\r\n        enableFullScreen();\r\n        window.addEventListener(\"keydown\", handleEscapeKey);\r\n\r\n        // Cleanup on unmount\r\n        return () => {\r\n            window.removeEventListener(\"keydown\", handleEscapeKey);\r\n        };\r\n    }, [navigate]);\r\n\r\n    // Fetch the next question\r\n    const fetchQuestion = async (id = null) => {\r\n        try {\r\n            setLoading(true);\r\n            setQuestion(null);\r\n\r\n            const url = id\r\n                ? `http://127.0.0.1:8000/api/fetch-next-question/?current_question_id=${id}`\r\n                : \"http://127.0.0.1:8000/api/fetch-next-question/\";\r\n            \r\n            const response = await axios.get(url);\r\n            const data = response.data;\r\n\r\n            if (data.message === \"No more questions available.\") {\r\n                setQuestion(null);\r\n                setSubmitMessage(\"Interview completed! Thank you.\");\r\n                clearInterval(answerTimerRef.current);\r\n                clearInterval(submitTimerRef.current);\r\n                navigate(\"/feedback\");\r\n            } else {\r\n                setQuestion(data);\r\n                setCurrentQuestionId(data.id);\r\n                resetTimers();\r\n            }\r\n        } catch (err) {\r\n            setError(err.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    // Fetch question on mount and cleanup timers\r\n    useEffect(() => {\r\n        fetchQuestion();\r\n\r\n        return () => {\r\n            clearInterval(answerTimerRef.current);\r\n            clearInterval(submitTimerRef.current);\r\n        };\r\n    }, []);\r\n\r\n    // Reset timers for answering and submission\r\n    const resetTimers = () => {\r\n        if (answerTimerRef.current) clearInterval(answerTimerRef.current);\r\n        if (submitTimerRef.current) clearInterval(submitTimerRef.current);\r\n\r\n        setAnswerTimer(30);\r\n        setSubmitTimer(60);\r\n        setIsAnswering(false);\r\n\r\n        answerTimerRef.current = setInterval(() => {\r\n            setAnswerTimer((prev) => {\r\n                if (prev <= 1) {\r\n                    clearInterval(answerTimerRef.current);\r\n                    handleSkipQuestion();\r\n                    return 0;\r\n                }\r\n                return prev - 1;\r\n            });\r\n        }, 1000);\r\n    };\r\n\r\n    const startAnswering = () => {\r\n        setIsAnswering(true);\r\n        if (answerTimerRef.current) clearInterval(answerTimerRef.current);\r\n\r\n        submitTimerRef.current = setInterval(() => {\r\n            setSubmitTimer((prev) => {\r\n                if (prev <= 1) {\r\n                    clearInterval(submitTimerRef.current);\r\n                    handleSkipQuestion();\r\n                    return 0;\r\n                }\r\n                return prev - 1;\r\n            });\r\n        }, 1000);\r\n    };\r\n\r\n    // Handle voice input\r\n    const handleVoiceInput = () => {\r\n        if (!(\"SpeechRecognition\" in window || \"webkitSpeechRecognition\" in window)) {\r\n            alert(\"Your browser does not support voice input.\");\r\n            return;\r\n        }\r\n\r\n        const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\r\n        recognition.lang = \"en-US\";\r\n        recognition.interimResults = false;\r\n\r\n        recognition.onresult = (event) => {\r\n            const transcript = event.results[0][0].transcript;\r\n            setUserAnswer(transcript);\r\n        };\r\n\r\n        recognition.onerror = (event) => {\r\n            console.error(\"Speech recognition error:\", event.error);\r\n        };\r\n\r\n        recognition.start();\r\n    };\r\n\r\n    // Submit answer\r\n    const handleSubmit = async () => {\r\n        if (!userAnswer.trim()) {\r\n            alert(\"Please provide an answer before submitting.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await axios.post(\r\n                \"http://127.0.0.1:8000/api/submit-response/\",\r\n                {\r\n                    question_id: currentQuestionId,\r\n                    user_answer: userAnswer,\r\n                }\r\n            );\r\n\r\n            if (response.status === 200) {\r\n                const data = response.data;\r\n                setSubmitMessage(data.message || \"Answer submitted successfully!\");\r\n                setScore(data.score);\r\n                setUserAnswer(\"\");\r\n                fetchQuestion(currentQuestionId);\r\n            } else {\r\n                setSubmitMessage(\"An error occurred. Please try again.\");\r\n            }\r\n        } catch (err) {\r\n            console.error(\"Error submitting response:\", err);\r\n            setSubmitMessage(\r\n                err.response?.data?.error || \"A network error occurred. Please check your connection.\"\r\n            );\r\n        } finally {\r\n            if (submitTimerRef.current) clearInterval(submitTimerRef.current);\r\n        }\r\n    };\r\n\r\n    const handleSkipQuestion = () => {\r\n        setUserAnswer(\"\");\r\n        setSubmitMessage(\"\");\r\n        fetchQuestion(currentQuestionId);\r\n    };\r\n\r\n    const formatTime = (seconds) => {\r\n        const mins = Math.floor(seconds / 60);\r\n        const secs = seconds % 60;\r\n        return `${mins}:${secs < 10 ? \"0\" : \"\"}${secs}`;\r\n    };\r\n\r\n    if (loading) return <h1>Loading...</h1>;\r\n    if (error) return <h1>Error: {error}</h1>;\r\n\r\n    return (\r\n        <div style={{ textAlign: \"center\", padding: \"20px\" }}>\r\n            <h1>Interview Question</h1>\r\n            <h2>\r\n                {isAnswering\r\n                    ? `Submit Time Left: ${formatTime(submitTimer)}`\r\n                    : `Answer Time Left: ${formatTime(answerTimer)}`}\r\n            </h2>\r\n\r\n            {question ? (\r\n                <div>\r\n                    <h2>{question.question}</h2>\r\n                    <p>\r\n                        <strong>Difficulty:</strong> {question.difficulty}\r\n                    </p>\r\n                    <div>\r\n                        <h3>Your Answer:</h3>\r\n                        <textarea\r\n                            value={userAnswer}\r\n                            onChange={(e) => setUserAnswer(e.target.value)}\r\n                            rows=\"4\"\r\n                            cols=\"50\"\r\n                        />\r\n                    </div>\r\n                    <button onClick={startAnswering} disabled={isAnswering}>\r\n                        Answer the Question\r\n                    </button>\r\n                    <button onClick={handleVoiceInput} disabled={!isAnswering}>\r\n                        Use Voice Input\r\n                    </button>\r\n                    <button onClick={handleSubmit} disabled={!isAnswering}>\r\n                        Submit Answer\r\n                    </button>\r\n                    <button onClick={handleSkipQuestion}>\r\n                        Go to Next Question\r\n                    </button>\r\n                </div>\r\n            ) : (\r\n                <p>{submitMessage || \"No question available at the moment.\"}</p>\r\n            )}\r\n            {submitMessage && <p>{submitMessage}</p>}\r\n            <p>\r\n                <strong>Score:</strong> {score}\r\n            </p>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InterviewPage;\r\n"],"mappings":";;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAKA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,WAAW,QAAQ,kB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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}