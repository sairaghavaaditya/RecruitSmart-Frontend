{"ast":null,"code":"var _jsxFileName = \"D:\\\\SIH\\\\RecruitSmart\\\\RecruitSmart Frontend\\\\src\\\\components\\\\UserDashboard\\\\Simulation\\\\Interviewpage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport axios from \"axios\";\nimport Webcam from \"react-webcam\";\nimport { loadModels, loadInitialImage, startWebcamProcessing } from './faceRecognition';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction InterviewPage() {\n  _s();\n  const {\n    command_id\n  } = useParams();\n  const [question, setQuestion] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [userAnswer, setUserAnswer] = useState(\"\");\n  const [submitMessage, setSubmitMessage] = useState(\"\");\n  const [currentQuestionId, setCurrentQuestionId] = useState(null);\n  const [answerTimer, setAnswerTimer] = useState(30);\n  const [submitTimer, setSubmitTimer] = useState(60);\n  const [isAnswering, setIsAnswering] = useState(false);\n  const [score, setScore] = useState(0);\n  const webcamRef = useRef(null);\n  const videoRef = useRef(null); // Reference for video element\n  const [initialDescriptor, setInitialDescriptor] = useState(null);\n  const [isModelLoaded, setIsModelLoaded] = useState(false);\n  const answerTimerRef = useRef(null);\n  const submitTimerRef = useRef(null);\n  const fetchQuestion = async (id = null) => {\n    try {\n      setLoading(true);\n      setQuestion(null);\n      const url = id ? `http://127.0.0.1:8000/api/fetch-next-question/?current_question_id=${id}&command_id=${command_id}` : `http://127.0.0.1:8000/api/fetch-next-question/?&command_id=${command_id}`;\n      const response = await axios.get(url);\n      const data = response.data;\n      if (data.message === \"No more questions available.\") {\n        setQuestion(null);\n        setSubmitMessage(\"Interview completed! Thank you.\");\n        clearInterval(answerTimerRef.current);\n        clearInterval(submitTimerRef.current);\n      } else {\n        setQuestion(data);\n        setCurrentQuestionId(data.id);\n        resetTimers();\n        speakText(data.question);\n      }\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const initializeApp = async () => {\n    const modelsLoaded = await loadModels();\n    if (modelsLoaded) {\n      setIsModelLoaded(true);\n      const descriptor = await loadInitialImage(true);\n      setInitialDescriptor(descriptor);\n    }\n  };\n  useEffect(() => {\n    initializeApp();\n    fetchQuestion();\n    answerTimerRef.current = setInterval(() => {\n      setAnswerTimer(prev => {\n        if (prev <= 1) {\n          clearInterval(answerTimerRef.current);\n          handleSkipQuestion();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n    return () => clearInterval(answerTimerRef.current);\n  }, []);\n  useEffect(() => {\n    if (isModelLoaded && initialDescriptor) {\n      startWebcamProcessing(videoRef.current, initialDescriptor, handleFaceMismatch);\n    }\n  }, [isModelLoaded, initialDescriptor]);\n  const handleFaceMismatch = () => {\n    alert(\"Face mismatch detected! Please ensure you stay in front of the camera.\");\n  };\n  const resetTimers = () => {\n    if (answerTimerRef.current) clearInterval(answerTimerRef.current);\n    if (submitTimerRef.current) clearInterval(submitTimerRef.current);\n    setAnswerTimer(30);\n    setSubmitTimer(30);\n    setIsAnswering(false);\n    answerTimerRef.current = setInterval(() => {\n      setAnswerTimer(prev => {\n        if (prev <= 1) {\n          clearInterval(answerTimerRef.current);\n          handleSkipQuestion();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n  const startAnswering = () => {\n    setIsAnswering(true);\n    if (answerTimerRef.current) clearInterval(answerTimerRef.current);\n    submitTimerRef.current = setInterval(() => {\n      setSubmitTimer(prev => {\n        if (prev <= 1) {\n          clearInterval(submitTimerRef.current);\n          handleSkipQuestion();\n          return 0;\n        }\n        return prev - 1;\n      });\n    }, 1000);\n  };\n  const handleVoiceInput = () => {\n    const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\n    recognition.lang = \"en-US\";\n    recognition.interimResults = false;\n    recognition.onresult = event => {\n      const transcript = event.results[0][0].transcript;\n      setUserAnswer(transcript);\n    };\n    recognition.onerror = event => {\n      console.error(\"Speech recognition error:\", event.error);\n    };\n    recognition.start();\n  };\n  const handleSubmit = async () => {\n    if (!userAnswer.trim()) {\n      alert(\"Please provide an answer before submitting.\");\n      return;\n    }\n    try {\n      const response = await axios.post(\"http://127.0.0.1:8000/api/submit-response/\", {\n        question_id: currentQuestionId,\n        user_answer: userAnswer\n      });\n      if (response.status === 200) {\n        const data = response.data;\n        setSubmitMessage(data.message || \"Answer submitted successfully!\");\n        setScore(data.score);\n        setUserAnswer(\"\");\n        fetchQuestion(currentQuestionId);\n      } else {\n        setSubmitMessage(\"An error occurred. Please try again.\");\n      }\n    } catch (err) {\n      var _err$response, _err$response$data;\n      console.error(\"Error submitting response:\", err);\n      setSubmitMessage(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.error) || \"A network error occurred. Please check your connection.\");\n    } finally {\n      if (submitTimerRef.current) clearInterval(submitTimerRef.current);\n    }\n  };\n  const speakText = text => {\n    const synth = window.speechSynthesis;\n    const utterance = new SpeechSynthesisUtterance(text);\n    utterance.lang = \"en-US\";\n    synth.speak(utterance);\n  };\n  const handleSkipQuestion = () => {\n    alert(\"Time is up! Moving to the next question.\");\n    fetchQuestion(currentQuestionId);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"mt-4\",\n      children: \"Interview Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 13\n    }, this), loading ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading question...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 17\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error fetching question: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 17\n    }, this) : question ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Question:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 24\n        }, this), \" \", question.question]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        value: userAnswer,\n        onChange: e => setUserAnswer(e.target.value),\n        placeholder: \"Type your answer here\",\n        className: \"form-control\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mt-3\",\n        onClick: handleSubmit,\n        children: \"Submit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-secondary mt-3 ml-2\",\n        onClick: handleVoiceInput,\n        children: \"Speak Answer\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"mt-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Time left to answer:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 41\n        }, this), \" \", answerTimer, \"s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: submitMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"mt-4\",\n      children: \"Webcam Feed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: videoRef,\n      autoPlay: true,\n      playsInline: true,\n      muted: true,\n      className: \"border\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 9\n  }, this);\n}\n_s(InterviewPage, \"dvcBhmBHHcICAZQ+V6tkEvhv6as=\", false, function () {\n  return [useParams];\n});\n_c = InterviewPage;\nexport default InterviewPage;\nvar _c;\n$RefreshReg$(_c, \"InterviewPage\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useParams","axios","Webcam","loadModels","loadInitialImage","startWebcamProcessing","jsxDEV","_jsxDEV","InterviewPage","_s","command_id","question","setQuestion","loading","setLoading","error","setError","userAnswer","setUserAnswer","submitMessage","setSubmitMessage","currentQuestionId","setCurrentQuestionId","answerTimer","setAnswerTimer","submitTimer","setSubmitTimer","isAnswering","setIsAnswering","score","setScore","webcamRef","videoRef","initialDescriptor","setInitialDescriptor","isModelLoaded","setIsModelLoaded","answerTimerRef","submitTimerRef","fetchQuestion","id","url","response","get","data","message","clearInterval","current","resetTimers","speakText","err","initializeApp","modelsLoaded","descriptor","setInterval","prev","handleSkipQuestion","handleFaceMismatch","alert","startAnswering","handleVoiceInput","recognition","window","SpeechRecognition","webkitSpeechRecognition","lang","interimResults","onresult","event","transcript","results","onerror","console","start","handleSubmit","trim","post","question_id","user_answer","status","_err$response","_err$response$data","text","synth","speechSynthesis","utterance","SpeechSynthesisUtterance","speak","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","placeholder","onClick","ref","autoPlay","playsInline","muted","_c","$RefreshReg$"],"sources":["D:/SIH/RecruitSmart/RecruitSmart Frontend/src/components/UserDashboard/Simulation/Interviewpage.jsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport Webcam from \"react-webcam\";\r\nimport { loadModels, loadInitialImage, startWebcamProcessing } from './faceRecognition';\r\n\r\nfunction InterviewPage() {\r\n    const { command_id } = useParams();\r\n    const [question, setQuestion] = useState(null);\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(null);\r\n    const [userAnswer, setUserAnswer] = useState(\"\");\r\n    const [submitMessage, setSubmitMessage] = useState(\"\");\r\n    const [currentQuestionId, setCurrentQuestionId] = useState(null);\r\n    const [answerTimer, setAnswerTimer] = useState(30);\r\n    const [submitTimer, setSubmitTimer] = useState(60);\r\n    const [isAnswering, setIsAnswering] = useState(false);\r\n    const [score, setScore] = useState(0);\r\n    const webcamRef = useRef(null);\r\n\r\n    const videoRef = useRef(null); // Reference for video element\r\n    const [initialDescriptor, setInitialDescriptor] = useState(null);\r\n    const [isModelLoaded, setIsModelLoaded] = useState(false);\r\n\r\n    const answerTimerRef = useRef(null);\r\n    const submitTimerRef = useRef(null);\r\n\r\n    const fetchQuestion = async (id = null) => {\r\n        try {\r\n            setLoading(true);\r\n            setQuestion(null);\r\n            const url = id\r\n                ? `http://127.0.0.1:8000/api/fetch-next-question/?current_question_id=${id}&command_id=${command_id}`\r\n                : `http://127.0.0.1:8000/api/fetch-next-question/?&command_id=${command_id}`;\r\n            const response = await axios.get(url);\r\n            const data = response.data;\r\n\r\n            if (data.message === \"No more questions available.\") {\r\n                setQuestion(null);\r\n                setSubmitMessage(\"Interview completed! Thank you.\");\r\n                clearInterval(answerTimerRef.current);\r\n                clearInterval(submitTimerRef.current);\r\n            } else {\r\n                setQuestion(data);\r\n                setCurrentQuestionId(data.id);\r\n                resetTimers();\r\n                speakText(data.question);\r\n            }\r\n        } catch (err) {\r\n            setError(err.message);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    const initializeApp = async () => {\r\n        const modelsLoaded = await loadModels();\r\n        if (modelsLoaded) {\r\n            setIsModelLoaded(true);\r\n            const descriptor = await loadInitialImage(true);\r\n            setInitialDescriptor(descriptor);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        initializeApp();\r\n        fetchQuestion();\r\n\r\n        answerTimerRef.current = setInterval(() => {\r\n            setAnswerTimer((prev) => {\r\n                if (prev <= 1) {\r\n                    clearInterval(answerTimerRef.current);\r\n                    handleSkipQuestion();\r\n                    return 0;\r\n                }\r\n                return prev - 1;\r\n            });\r\n        }, 1000);\r\n\r\n        return () => clearInterval(answerTimerRef.current);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (isModelLoaded && initialDescriptor) {\r\n            startWebcamProcessing(videoRef.current, initialDescriptor, handleFaceMismatch);\r\n        }\r\n    }, [isModelLoaded, initialDescriptor]);\r\n\r\n    const handleFaceMismatch = () => {\r\n        alert(\"Face mismatch detected! Please ensure you stay in front of the camera.\");\r\n    };\r\n\r\n    const resetTimers = () => {\r\n        if (answerTimerRef.current) clearInterval(answerTimerRef.current);\r\n        if (submitTimerRef.current) clearInterval(submitTimerRef.current);\r\n\r\n        setAnswerTimer(30);\r\n        setSubmitTimer(30);\r\n        setIsAnswering(false);\r\n\r\n        answerTimerRef.current = setInterval(() => {\r\n            setAnswerTimer((prev) => {\r\n                if (prev <= 1) {\r\n                    clearInterval(answerTimerRef.current);\r\n                    handleSkipQuestion();\r\n                    return 0;\r\n                }\r\n                return prev - 1;\r\n            });\r\n        }, 1000);\r\n    };\r\n\r\n    const startAnswering = () => {\r\n        setIsAnswering(true);\r\n        if (answerTimerRef.current) clearInterval(answerTimerRef.current);\r\n\r\n        submitTimerRef.current = setInterval(() => {\r\n            setSubmitTimer((prev) => {\r\n                if (prev <= 1) {\r\n                    clearInterval(submitTimerRef.current);\r\n                    handleSkipQuestion();\r\n                    return 0;\r\n                }\r\n                return prev - 1;\r\n            });\r\n        }, 1000);\r\n    };\r\n\r\n    const handleVoiceInput = () => {\r\n        const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();\r\n        recognition.lang = \"en-US\";\r\n        recognition.interimResults = false;\r\n\r\n        recognition.onresult = (event) => {\r\n            const transcript = event.results[0][0].transcript;\r\n            setUserAnswer(transcript);\r\n        };\r\n\r\n        recognition.onerror = (event) => {\r\n            console.error(\"Speech recognition error:\", event.error);\r\n        };\r\n\r\n        recognition.start();\r\n    };\r\n\r\n    const handleSubmit = async () => {\r\n        if (!userAnswer.trim()) {\r\n            alert(\"Please provide an answer before submitting.\");\r\n            return;\r\n        }\r\n\r\n        try {\r\n            const response = await axios.post(\r\n                \"http://127.0.0.1:8000/api/submit-response/\",\r\n                {\r\n                    question_id: currentQuestionId,\r\n                    user_answer: userAnswer,\r\n                }\r\n            );\r\n\r\n            if (response.status === 200) {\r\n                const data = response.data;\r\n                setSubmitMessage(data.message || \"Answer submitted successfully!\");\r\n                setScore(data.score);\r\n                setUserAnswer(\"\");\r\n                fetchQuestion(currentQuestionId);\r\n            } else {\r\n                setSubmitMessage(\"An error occurred. Please try again.\");\r\n            }\r\n        } catch (err) {\r\n            console.error(\"Error submitting response:\", err);\r\n            setSubmitMessage(err.response?.data?.error || \"A network error occurred. Please check your connection.\");\r\n        } finally {\r\n            if (submitTimerRef.current) clearInterval(submitTimerRef.current);\r\n        }\r\n    };\r\n\r\n    const speakText = (text) => {\r\n        const synth = window.speechSynthesis;\r\n        const utterance = new SpeechSynthesisUtterance(text);\r\n        utterance.lang = \"en-US\";\r\n        synth.speak(utterance);\r\n    };\r\n\r\n    const handleSkipQuestion = () => {\r\n        alert(\"Time is up! Moving to the next question.\");\r\n        fetchQuestion(currentQuestionId);\r\n    };\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <h1 className=\"mt-4\">Interview Page</h1>\r\n            {loading ? (\r\n                <p>Loading question...</p>\r\n            ) : error ? (\r\n                <p>Error fetching question: {error}</p>\r\n            ) : question ? (\r\n                <div>\r\n                    <p><strong>Question:</strong> {question.question}</p>\r\n                    <textarea\r\n                        value={userAnswer}\r\n                        onChange={(e) => setUserAnswer(e.target.value)}\r\n                        placeholder=\"Type your answer here\"\r\n                        className=\"form-control\"\r\n                    />\r\n                    <button className=\"btn btn-primary mt-3\" onClick={handleSubmit}>Submit</button>\r\n                    <button className=\"btn btn-secondary mt-3 ml-2\" onClick={handleVoiceInput}>\r\n                        Speak Answer\r\n                    </button>\r\n                    <p className=\"mt-3\"><strong>Time left to answer:</strong> {answerTimer}s</p>\r\n                </div>\r\n            ) : (\r\n                <p>{submitMessage}</p>\r\n            )}\r\n            <h3 className=\"mt-4\">Webcam Feed</h3>\r\n            <video ref={videoRef} autoPlay playsInline muted className=\"border\"></video>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default InterviewPage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}